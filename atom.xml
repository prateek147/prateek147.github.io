<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Prateek Gianchandani]]></title>
  <link href="http://prateek147.github.io/atom.xml" rel="self"/>
  <link href="http://prateek147.github.io/"/>
  <updated>2018-04-19T16:38:00+04:00</updated>
  <id>http://prateek147.github.io/</id>
  <author>
    <name><![CDATA[Prateek Gianchandani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Releasing Damn Vulnerable iOS App v2.0 - written in Swift]]></title>
    <link href="http://prateek147.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition"/>
    <updated>2018-04-19T01:03:00+04:00</updated>
    <id>http://prateek147.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition</id>
    <content type="html"><![CDATA[<p>I am glad to release a completely new version of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS App</a> written in Swift 4. With developers now migrating to Swift for developing apps, it is important to have a testbed app for iOS in Swift. Though I have added some sections in Objective-C too which the users can test to learn Objective-C related vulns.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia2/dvia.png" width="310" height="552" alt="1"></p>

<p>The following vulnerabilities are covered in this version.</p>

<ol>
<li><b>Local Data Storage</b> - Data Storage in Plist, UserDefaults, Keychain, CoreData, Webkit Cache, Realm, Couchbase and YapDatabase.</li>
<li><b>Jailbreak Detection</b> - 5 challenges in this section. Apart from the usual checks where you can use runtime manipulation and attach debuggers to bypass Jailbreak detection, users will have to mitigate scenarios where there is added runtime protection, use of inline functions, string obfuscation, and certain edge cases, for e.g the exiting of an app when a jailbroken device is detected.</li>
<li><b>Excessive Permissions</b> - A demo on how app permissions can be misused, as demonstrated by Krause originally.</li>
<li><b>Runtime Manipulation</b> - Use runtime manipulation to modify instance variables, bypass local login checks, and brute force pin codes. In some cases, you might have to attach a debugger.</li>
<li><b>Anti Anti Hooking/Debugging</b> - Enabling these will detect when a debugger or a runtime analysis tool such as Cycript is attached to the app. There is also detection for MobileSubstrate, SSLKillSwitch2 etc. Try and work your way around it and see if you can still solve other challenges with these limitations. Reverse & Patch, Patch, Patch ! </li>
<li><b>Binary Protection</b> - Do some binary analysis to identify whether ARC, PIE, Stack smashing is enabled. Find the signature used to sign the binary and the entitlements it has. Also check if the app is stripped of its symbols or not.</li>
<li><b>Touch/Face ID Bypass</b> - Bypass Touch ID authentication when insecure APIs (LAContext) are being used.</li>
<li><b>Phishing</b> - Demonstration of alerts generated by app that look like the ones generated from App Store, which can potentially be used for conducting phishing attacks. Original idea by Krause.</li>
<li><b>Side Channel Data Leakage</b> - Understand the different kinds of Side Channel Data leakage such as Device Logs, Pasteboard, App Screenshot, Keystroke Logging, Insecure APIs used for HTTP Cookies etc.</li>
<li><b>IPC Issues</b> - Solve this challenge to understand what can happen when an app is receiving requests via URL schemes from untrusted sources and doesn&#8217;t validate it properly.</li>
<li><b>Broken Cryptography</b> - Bypass 2 encryption and hashing implementations, one with AES  and the other one with PBKDF2 with only few rounds of hashing.</li>
<li><b>Webview Issues</b> - Understand injections in Webviews.</li>
<li><b>Network Layer Security</b> - Capture traffic over HTTP and HTTPs. Bypass Certificate and Public Key Pinning. Also understand what is ATS (App Transport Security) and check whether it is implemented or not.</li>
<li><b>Application Patching</b> - Patch login checks, jailbreak detection methods, and in specific certain specific instructions used in the app.</li>
<li><b>Sensitive Information in Memory</b> - Dump the information from the memory to look at the sensitive data.</li>
</ol>




<!-- more -->




<h2>Installing DVIA on any iOS device </h2>


<p>The best way to install DVIA on any device (jailbroken or not) is using <a href="http://www.cydiaimpactor.com/
">Cydia Impactor</a>. However, it would be ideal to have a jailbroken device for testing as most of the vulnerabilities can be exploited only with the use of a JB device.</p>

<h3>Steps</h3>




<ol>
<li>Create an Apple ID https://appleid.apple.com/account.</li>
<li>Download <em>Impactor</em>, make sure the device you want to install the app on is connected to your computer. Now drag and drop the <em>IPA</em> file to <em>Impactor</em>.</li>
<li>Enter your Apple ID credentials. App will install on the device.</li>
<li>Go to your device, <em>Settings -> General -> Device Management</em>. Select the Apple ID you used to install the app. Click on <em>Verify App</em> under DVIAv2.</li>
</ol>




<h2>Compiling DVIA using Xcode </h2>




<h3>Steps</h3>




<ol>
<li>Clone the DVIA repo , git clone https://github.com/prateek147/DVIA-v2</li>
<li>cd to the project root directory where the <em>Podfile</em> is present (/DVIA-v2/DVIA-v2). Then run <em>pod install</em></li>
<li>Open the <em>DVIA-v2.xcworkspace</em> file with Xcode. You can now directly run the app on a simulator.</li>
<li>For running on the device, go under Project settings in Xcode on the top left, head over to the <em>General</em> tab and under <em>Signing</em>, enter credentials for your Apple ID.</li>
<li>Now you can build and run the project on the device. You will have to trust the app again by going under Settings -> General -> Device Management. </li>
</ol>




<h2>Some Important Links</h2>




<ol>
<li>Application Website - <a href="http://damnvulnerableiosapp.com">Here</a></li>
<li>Github Page - <a href="https://github.com/prateek147/DVIA-v2">https://github.com/prateek147/DVIA-v2</a></li>
<li>Download Page - <a href="http://damnvulnerableiosapp.com#downloads">Here</a></li>
</ol>




<h2>Donate</h2>




<p>if you benefit from this project and want to make a contribution, please consider making a donation to The Juniper Fund (www.thejuniperfund.org/)</p>




<p>The Juniper fund is focusing on high altitude workers involved with climbing and expedition support in the high mountains of Nepal. When a high altitude worker has an accident (death or debilitating injury), the impact to the family is devastating. The juniper fund provides funds to the affected families with a 3-Tier model - Cost of Living grant, vocational training and small business grant. For more information,  visit <a href="http://www.thejuniperfund.org">www.thejuniperfund.org</a>.</p>




<p>Or watch the videos below.</p>




<iframe width="560" height="314" src="https://www.youtube.com/embed/HsV6jaA5J2I" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/6dHXcoF590E" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<p><strong>Solutions</strong></p>

<p>I am still working on the solutions and would post them in form of blog posts starting soon.</p>


<p>For any questions, shoot me an email at Prateek at damnvulnerableiosapp.com or DM me on <a href="https://twitter.com/prateekg147">Twitter</a>. For any bugs/functionalities, please raise them via the <a href="https://github.com/prateek147/DVIA-v2">Github</a> page.</p>




<p>Happy Hacking !</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 46 - App Transport Security]]></title>
    <link href="http://prateek147.github.io/2016/06/23/ios-application-security-part-46-app-transport-security"/>
    <updated>2016-06-23T01:03:00+04:00</updated>
    <id>http://prateek147.github.io/2016/06/23/ios-application-security-part-46-app-transport-security</id>
    <content type="html"><![CDATA[<p>One of the most common misconfiguration issues that i find during testing iOS apps is the bypass of the App Transport Security feature introduced by Apple in iOS 9. Here&rsquo;s an excerpt from Apple&rsquo;s documentation about ATS.</p>

<p><b><i>&ldquo;Starting in iOS 9.0 and OS X v10.11, a new security feature called App Transport Security (ATS) is available to apps and is enabled by default. It improves the privacy and data integrity of connections between an app and web services by enforcing additional security requirements for HTTP-based networking requests. Specifically, with ATS enabled, HTTP connections must use HTTPS (RFC 2818). Attempts to connect using insecure HTTP fail. Furthermore, HTTPS requests must use best practices for secure communications.&rdquo;</i></b></p>

<!-- more -->


<p>It is important to note that just using HTTPs is not enough. The following screenshot taken from Apple&rsquo;s <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33">documentation</a> discusses the necessary conditions necessary for ATS.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/1.png" width="2186" height="1114" alt="1"></p>

<p>Since updating to iOS 9, developers start getting errors like if the app is not communicating over a secure connection.</p>

<p><b><i>Connection failed: Error Domain=NSURLErrorDomain Code=-1022 &ldquo;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.&rdquo; UserInfo={NSUnderlyingError=0x7fada0f31880 {Error Domain=kCFErrorDomainCFNetwork Code=-1022 &ldquo;(null)&rdquo;}, NSErrorFailingURLStringKey=MyServiceURL, NSErrorFailingURLKey=MyServiceURL, NSLocalizedDescription=The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.}</i></b></p>

<p>The reason for this is because developers are mostly testing their apps against a staging server with a misconfigured certificate. In some cases, they might be communication with production servers over HTTPs but might not be using old TLS versions. A simple google search will take you to a <a href="http://stackoverflow.com/questions/32631184/the-resource-could-not-be-loaded-because-the-app-transport-security-policy-requi">Stack overflow</a> that tells you how to bypass ATS by setting a single key NSAllowsArbitraryLoads to YES in the Info.plist file.</p>

<p>The following configuration in the Info.plist file shows the ATS feature bypass implemented.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/x.png" width="499" height="190" alt="X"></p>

<p>However, in some cases the developer might have a secure communication with their backend server. But communication with third party servers for Analytics, Crash logs etc might not be over a secure connection. In this case, they can add certain domains as an exception.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/y.png" width="558" height="108" alt="Y"></p>

<p>To find whether the app has ATS enabled or not, you can perform the following steps.</p>

<ol>
<li>Decrypt the app using Clutch</li>
<li>Unzip the decrypted IPA file and look inside the Info.plist file.</li>
<li>Look for the key <i>App Transport Security</i>.</li>
</ol>


<p>By the end of 2016, App transport security is going to be a <a href="https://techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/">requirement</a> for App Store apps. It is important that you report any ATS bypass to the developers during security assessment of iOS Apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 45 - Enhancements in Damn Vulnerable iOS app version 1.5]]></title>
    <link href="http://prateek147.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0"/>
    <updated>2015-05-31T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0</id>
    <content type="html"><![CDATA[<p>In this article, i would like to give a quick walkthrough of the new vulnerabilities and challenges that we have added in version 1.5 of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app</a>.</p>




<p>In the Insecure Data storage section, we have added challenges for the following databases.</p>




<ul>
    <li>Realm Database</li>
    <li>Couchbase Lite</li>
    <li>YapDatabase</li>
</ul>




<!-- more -->


<p><img src="http://prateek147.github.io/images/posts/ios45/1.png" width="235" height="321" alt="1"></p>

<p><img src="http://prateek147.github.io/images/posts/ios45/2.png" width="235" height="310" alt="2">
<img src="http://prateek147.github.io/images/posts/ios45/3.png" width="235" height="314" alt="3"></p>

<p>We have also added a new section on <i>Extension vulnerabilities</i>, which covers vulnerabilities in different application extensions, a feature that was introduced with iOS 8.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/4.png" width="235" height="328" alt="4">
<img src="http://prateek147.github.io/images/posts/ios45/5.png" width="235" height="328" alt="5"></p>

<p>In the <i>Runtime Manipulation section</i>, we have added a challenge where you can write a cycript script to brute force a login screen.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/6.png" width="235" height="281" alt="6"></p>

<p>Another new section is <i>Attacks on third party libraries</i>, which demonstrates the security gaps that can occur in your application when you use third party libraries in your project.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/7.png" width="235" height="315" alt="7">
<img src="http://prateek147.github.io/images/posts/ios45/8.png" width="235" height="320" alt="8">
<img src="http://prateek147.github.io/images/posts/ios45/9.png" width="235" height="265" alt="9">
<img src="http://prateek147.github.io/images/posts/ios45/10.png" width="235" height="256" alt="10">
<img src="http://prateek147.github.io/images/posts/ios45/11.png" width="235" height="281" alt="11">
<img src="http://prateek147.github.io/images/posts/ios45/12.png" width="235" height="266" alt="12"></p>

<p>In the section on <i>Side Channel Data leakage</i>, we have added another vulnerability demonstrating insecure storage of cookies.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/13.png" width="233" height="365" alt="13"></p>

<p>The current downloadable IPA file from the website is a fat binary that will work on both 32 bit and 64 bit devices. This app will work on all iOS versions starting from iOS 7.0.</p>




<p>Some important links</p>




<ol>
    <li><a href="http://damnvulnerableiosapp.com">Official Website</a></li>
    <li><a href="http://github.com/prateek147/DVIA">Github Page</a></li>
    <li><a href="http://damnvulnerableiosapp.com#downloads">Downloads Page</a></li>
</ol>




<p>We are working on getting the new solutions out as soon as possible so please be patient. For previous vulnerabilities, you can download the solutions for free from <a href="http://damnvulnerableiosapp.com#solutions">here</a>.</p>




<p>For any bugs, suggestions etc, please don&#8217;t hesitate to contact me. Also, a very special thanks to <a href="http://twitter.com/igrekde">Egor</a> for his contributions to the project.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 44 - Bypassing Jailbreak detection using Xcon]]></title>
    <link href="http://prateek147.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon"/>
    <updated>2015-05-23T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon</id>
    <content type="html"><![CDATA[<p>In this small article, we will look at a very handful utility named <a href="https://www.theiphonewiki.com/wiki/XCon">Xcon</a>for bypassing Jailbreak detection. As per the wiki page &#8230;</p>




<p><i>xCon is a collaborative project by n00neimp0rtant and Lunatik that aims to be an all-in-one solution for hooking every known method and function responsible for informing an application of a jailbroken device. At first, the project aimed to patch applications on a per-app basis, but now it uses lower-level hooks to cover any apps that attempt to use the same procedure, even patching apps not explicitly reversed by the developers. Originally an open-source project, it remains closed-source now to discourage App Store developers from working around xCon&#8217;s hooks.</i></p>




<p>A very handful resource for detecting jailbroken devices can be found <a href="https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection">here</a>. Here is a screenshot from the page. The purpose of Xcon is to make sure all these checks fail.</p>




<!-- more -->


<p><img src="http://prateek147.github.io/images/posts/ios44/1.png" width="1249" height="432" alt="1"></p>

<p>Downloading Xcon in your project is very straightforward. Make sure http://apt.modmyi.com is added as a source in Cydia and search for Xcon. Install in on your device and restart your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios44/x.PNG" width="375" height="677" alt="X"></p>

<p>Once you run any app, you will notice that the library will inject into the process as can be seen from the following device logs.
    
<img src="http://prateek147.github.io/images/posts/ios44/2.png" width="760" height="146" alt="2">

<p>If you are performing jailbreak detection in your application, it is recommended to have your app checked against Xcon. The library is closed source as making it open source will help developers understand how it works and hence make workarounds to their code.</p>
Please note that the current version of Xcon has a lot of issues with iOS 8 and 64 bit devices. Hence it is recommended to run your app on a 32 bit device if you want to test it against Xcon. A complete list of all the issues occuring with Xcon can be found <a href="https://github.com/n00neimp0rtant/xCon-Issues">here.</a></p>


<p><img src="http://prateek147.github.io/images/posts/ios44/5.png" width="776" height="90" alt="5"></p>

<p>Xcon has already patched jailbreak checks done by a lot of the popular apps and it also maintains a list of it. A screenshot of it can be found below. To see the complete list, you can visit Xcon&#8217;s page.</p>


<p><img src="http://prateek147.github.io/images/posts/ios44/4.png" width="1508" height="449" alt="4"></p>

<p>Xcon is a recommended package to install on your device if you are pentesting an app that does jailbreak detection or if you are a developer and want to know that your jailbreak detection algorithm is accurate.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 43 - FAT binaries &amp; LLDB usage continued]]></title>
    <link href="http://prateek147.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued"/>
    <updated>2015-05-17T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued</id>
    <content type="html"><![CDATA[<p>In this article, we will talk about FAT binaries and see more usage of LLDB.</p>




<p>Fat binaries are single binaries that are compiled for different architectures. They are done so because it is easier to ship a single binary for different architectures. Apple has been changing the architecture in the last three versions of it&#8217;s iPhones, armv7, armv7s, and arm64. The good thing is that new iOS devices can run applications compiled for older architectures as well. However it is recommended to upgrade the architecture of the application for enhanced performance.</p>




<p>You can see the architecture for your project by going to the Project in Xcode and looking under Build Settings.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/1.png" width="645" height="229" alt="1"></p>

<!-- more -->




<p>A good way to find the architectures for which a binary is deployed is using otool. You can use the -f command to look at the fat headers.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/2.png" width="243" height="202" alt="2"></p>

<p>As you can see, it doesn&#8217;t mention the architecture name but the cputype and cpusubtype. However, after a bit of lookup from the information on cputype and cpusubtype, you can find out that the first one is armv7s whereas the second one is armv64. You can also use Clutch to find this out. Whitle decrypting, it can give information about the kinds of architectures the binary had. As you can see, in this case it was armv7 and arm64.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/3.png" width="514" height="332" alt="3"></p>

<p>The easiest way is to find via the tool lipo</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/3s.png" width="576" height="42" alt="3s"></p>

<p>In some cases, if some tool doesn&#8217;t work against a particular application, it is better to strip that architecture from the binary. This can be done using a tool named lipo. This is essentially useful as a lot of tools don&#8217;t work against arm64 binaries.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/4.png" width="743" height="137" alt="4"></p>

<p>So with this little intro about fat binaries out of the way, lets carry on using LLDB. Like last article, we will be performing the analysis on Twitter app. Using Hopper, we can see some methods in the Twitter app.</p>


<p></p>

<p><img src="http://prateek147.github.io/images/posts/ios43/5.png" width="1019" height="551" alt="5"></p>

<p>So let&#8217;s set a breakpoint for the method <i>b -[T1CommerceOfferHowWorksView setHiddenObserver:]</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/6.png" width="557" height="76" alt="6"></p>

<p>Oops, looks like we are unable to set a breakpoint. But why is that ? The reason is, LLDB hasn&#8217;t loaded the symbols from the binary yet. The symbols are what contains information about the class names and methods. This is unlike GDB where it loads the symbols while performing analysis on the binary. Remember however that you are running the LLDB client on your system and not the device. To confirm that you have not yet loaded the symbols, you can use the command <i>image dump symtab</i> to load the symbols and look for this particular method, you will not find it.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/7.png" width="902" height="427" alt="7"></p>

<p>In order to load the symbols from the binary into LLDB, first download the LLDB binary onto your computer, then use the following command to load the symbols. Note that the architeture is set to armv7 by default.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/8.png" width="605" height="65" alt="8"></p>

<p>And now, you can see that you can set the breakpoint.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/9.png" width="854" height="59" alt="9"></p>

<p>If you know that the app is compiled for a 64 bit architecture, and the device is a 64 bit device, you should set the architecture to arm64. Does that make a difference ? Yes. Because the address will be different for the same method for different architectures (Fat binaries) and the method will not be called if you have set the breakpoint for a different architecture than the device it is compiled on.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/10.png" width="921" height="101" alt="10"></p>

<p>Another thing. If you ever run a command and get the error <i>invalid frame</i>, it means that the process is still running. In order to execute commands, the process must be paused. This can be done using the <i>process interrupt</i> command.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/x1.png" width="477" height="99" alt="X1">
<img src="http://prateek147.github.io/images/posts/ios43/x2.png" width="570" height="259" alt="X2"></p>

<p>If you think that arm64 is hard to understand and it is a bit difficult to modify the runtime flow, you can load the same executable on a 32 bit device and use GDB or LLDB to modify the variables and change the runtime flow. This is because most applications currently come with 32 bit support. However, in the coming year or so, this will not be the case. We will also cover arm64 assembly in a later article.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 42 - LLDB Usage continued]]></title>
    <link href="http://prateek147.github.io/2015/05/12/ios-application-security-part-42-lldb-usage-continued"/>
    <updated>2015-05-12T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/12/ios-application-security-part-42-lldb-usage-continued</id>
    <content type="html"><![CDATA[<p>In this article, we will look at some of the most important commands in LLDB to debug applications.</p>




<p>If you have been following this blog series, you would have noticed that we have been using GDB until now for debugging applications, but the support for GDB has been disabled by Apple. Apple has compiled a very useful list of GDB to LLDB commands to get you up to date with debugging via LLDB that can be found <a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html">here</a>.</p>




<p>We will look at some of the most important commands after hooking into an application. In this case, lets start debugging the Twitter app. So make sure that the Twitter app is running in the foreground on the device and start a listener for the Twitter app.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/1.png" width="604" height="156" alt="1"></p>

<!-- more -->




<p>On your system, do the usual process of connecting to the debugserver application on the device to perform remote debugging. You can also use usbmuxd if you feel that debugging over Wifi is slow.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/2.png" width="913" height="653" alt="2"></p>

<p>Once the connection has been established, you can now run debbugger commands to analyze the application. Let&#8217;s print out the AppDelegate object.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/3.png" width="485" height="62" alt="3"></p>

<p>We can read registers using the <i>register read</i> command. To read all the registers, use the <i>register read &#8211;all</i> command.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/4.png" width="706" height="613" alt="4"></p>

<p>Note the difference in the registers ? It&#8217;s because of the new arm64 architecture for this application. Another important command is <i>image list</i> which will let you identify the location of the main executable and all the shared libraries.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/5.png" width="963" height="534" alt="5"></p>

<p>The <i>image dump sections</i> command will dump all the sections of the main executable and the shared libraries. You can later use this to dump information from the memory.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/6.png" width="1107" height="534" alt="6"></p>

<p>Setting a breakpoint is very similar to GDB. First, see if there are any breakpoints set using the <i>br l</i>. Then set a breakpoint for the objc_msgSend function using the <i>b objc_msgSend</i> command. Then, resume the application using the <i>process continue</i> command.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/7.png" width="716" height="80" alt="7"></p>

<p><img src="http://prateek147.github.io/images/posts/ios42/8.png" width="441" height="222" alt="8"></p>

<p>Once a breakpoint is hit, you can use the command <i>di -f</i> to see the disassembled code.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/9.png" width="702" height="331" alt="9"></p>

<p>We can also configure LLDB to execute a command once every breakpoint is hit. This could be very handy in tracing method calls in the application. To do that, use the command <i>target stop-hook add</i> and enter the commands that you want to enter once the breakpoint is hit. In this case, i have asked LLDB to print out all the registers and continue the program execution. </p>


<p><img src="http://prateek147.github.io/images/posts/ios42/10.png" width="961" height="484" alt="10"></p>

<p>If you don&#8217;t understand the purpose of these registers right now, don&#8217;t worry. I will cover arm64 architecture in a later article.</p>




<p>It is usually a good idea to strip the debug symbols from the application binary before submitting to the App store. You can do this by going to Build Settings and set the option <i>Strip Debug Symbols During Copy</i> to Yes.</p>


<p><img src="http://prateek147.github.io/images/posts/ios42/11.png" width="937" height="509" alt="11"></p>

<p>Hope you enjoyed this article. We have just scratched the surface of LLDB right now. In the next article, we will look at importing symbols from binaries and settings breakpoints on application specific methods.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 41 - Debugging applications using LLDB]]></title>
    <link href="http://prateek147.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb"/>
    <updated>2015-04-28T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb</id>
    <content type="html"><![CDATA[<p>In this article we will learn about the LLDB debugger used by Apple&#8217;s Xcode for debugging applications, understand why it is better for security testing, and then learn how to use it to debug iOS applications.</p>




<p>The following excerpt is from Apple&#8217;s documentation.</p>




<p>LLDB is Apple&#8217;s <i>from the ground up</i> replacement for GDB, developed in close coordination with the LLVM compilers to bring you state-of-the-art debugging with extensive capabilities in flow control and data inspection. Starting with Xcode 5, all new and preexisting development projects are automatically reconfigured to use LLDB. The standard LLDB installation provides you with an extensive set of commands designed to be compatible with familiar GDB commands. In addition to using the standard configuration, you can easily customize LLDB to suit your needs</p>




<p>A good way to start leaning about the LLDB debugger is to watch this video from WWDC 2014.</p>




<!-- more -->




<iframe width="420" height="315" src="https://www.youtube.com/embed/IPhgcbuDk_k" frameborder="0" allowfullscreen></iframe>




<p>But the question that remains is, why is LLDB better than GDB ?</p>




<p>To sum it up, there are a few reasons for that.</p>




<ul>
    <li>It works well for iOS 8</li>
    <li>LLDB is much faster, has support for multithread programming, and is scriptable.</li>
    <li>LLDB understands the dot syntax. You can use something like <i>po self.propertyName</i> or even <i>po instanceVariable</i> to find any value of a property or instance variable while debugging applications.</li>
    <li>It has plug-in support for functionality and extensions.</li>
</ul>




<p>To debug applications on an iOS device, we will use the command line utility debugserver which is used by Apple&#8217;s Xcode to debug applications on the device. Usually, it gets installed on the device automatically when a device is marked for development, which requires a valid provisioning profile, but it can only debug applications that were signed by that particular provisioning profile. This is because of lack of entitlement to allow task_for_pid(). Hence, in order to debug any application, we must create a new entitlement file with the mentioned flag set to true, sign the debug server application with that entitlement file, and then deploy the console app to the device. Please note that the current location of debugserver application on the Mac is a read-only ramdisk, hence the application must be copied to a different location before signing with the new entitlement file.</p>




<p>Hence, the first step to do is to mount Xcode&#8217;s developer disk image on your Mac and copy the debugserver binary to a seperate location where you can resign it. Use the following command.</p>




<p><i>hdiutil attach /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/[ios version]\ \(12B411\)/DeveloperDiskImage.dmg</i></p>


<p><img src="http://prateek147.github.io/images/posts/ios41/1.png" width="648" height="343" alt="1"></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/2.png" width="767" height="225" alt="2"></p>

<p>Once this is done, create a new file with the name entitlements.plist and enter the following data in it.</p>




<pre>
&lt?xml version="1.0" encoding="UTF-8"?&gt
&lt!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/ PropertyList-1.0.dtd"&gt
<plist version="1.0">
<dict>
    &ltkey&gtcom.apple.springboard.debugapplications</key>
    &lttrue/&gt
    &ltkey&gtrun-unsigned-code</key>
    &lttrue/&gt
    &ltkey&gtget-task-allow</key>
    &lttrue/&gt
    &ltkey&gttask_for_pid-allow</key>
    &lttrue/&gt
</dict> 
</plist>
</pre>




<p>Now, you have to resign the debugserver binary with the new entitlements file.</p>


<p><i>codesign -s &ndash; &mdash;entitlements entitlements.plist -f debugserver</i></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/3.png" width="806" height="42" alt="3"></p>

<p>Once this is done, deploy the binary to the device. To start debugserver on the device, use the command shown below, and also specify the name of the application you want to hook to, which in this case is Twitter.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/4.png" width="624" height="163" alt="4"></p>

<p>Now on your computer, start lldb to enter the lldb interpreter. Now use the following commands as shown below to to connect to the device. Make sure to replace the IP address here with the IP address of your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/5.png" width="590" height="409" alt="5"></p>

<p>Once this is done, you will see that you are successfully able to debug the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/6.png" width="715" height="380" alt="6"></p>

<p>Now you can use the po command to print out specific objects instantiated in the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/7.png" width="451" height="84" alt="7"></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/8.png" width="587" height="95" alt="8"></p>

<p>The syntax for LLDB is a bit different. For e.g, here is the syntax for printing all the register variables.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/9.png" width="705" height="500" alt="9"></p>

<p>That&#8217;s it for this article. In this article, we learnt how to deploy LLDB to the device and use it to run some basic commands. In the next article, we will look at some advanced usage of LLDB and how it can be used to find  sensitive information in memory.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 40 - Testing apps on your Mac]]></title>
    <link href="http://prateek147.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac"/>
    <updated>2015-04-28T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac</id>
    <content type="html"><![CDATA[<p>p>In this article, we will discuss the extent to which you can test applications on your Mac rather than the device. This could be useful for many reasons, sometimes you may not have a jailbroken device but want to get a POC for a vulnerability. We will discuss what are the things you can and cannot do. To test the application on your system, you will need to have Xcode installed on your system and you will run the applications on the iOS simulator.</p></p>

<h3>Installing ipa files from iTunes on your simulator</h3>




<p>Sadly, there is no way you can do that. This is because the iTunes applications are compiled for the ARM platform whereas the applications that run on your simulator are compiled for the x86/x64 platform. So, to test any application properly on your Mac, you must have the source code of the application to run it on the simulator.</p>




<p>In this case, we are going to perform our testing on <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app</a></p>




<!-- more -->




<h3>Analyzing local data storage</h3>




<p>One of the most important things to check during performing penetration testing of iOS applications is checking for insecure local data storage vulnerabilites. You can easily check this by looking at the application folder created on your Mac by Xcode.This folder is available at the following locations.</p>




<p>iOS 8 - /Users/[username]/Library/Developer/CoreSimulator/Devices/[a unique number]/data/Containers/Data/Application/[another unique number]/ </p>


<p>iOS 7 - /Users/[username]/Library/Application Support/iPhone Simulator/[ios version]/Applications/[a unique id]/</p>




<p>Make sure to check this folder and see if the application is not storing any sensitive data to this folder.</p>




<h3>Checking device logs</h3>




<p>You can easily check the logs that the applications is logging by looking at the logs section in Xcode. For example, over here, we can see that the application is logging sensitive data to the device. However, if you see this behaviour, don&#8217;t immediately report it as a vulnerability. Some developers add a check to detect whether the application is running on a simulator or a device, and only log information if it is running on a simulator. If there is no such check, then this is definitely a vulnerability.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/2.png" width="882" height="602" alt="2"></p>

<h3>Attaching debuggers and Tracing method calls</h3>




<p>You can attach a debugger to the running application in the simulator. Its better to use LLDB debugger since it comes installed with Xcode command line tools. The iOS application running on the simulator can also be seen as a running process on your computer by using the command <i>ps aux</i>. You can attach to the running application both by using the pid or the name.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/lldb.png" width="511" height="249" alt="Lldb"></p>

<p>You can easily trace the method calls by using the inbuilt debugger LLDB in Xcode. To do that, you need to add a symbolic breakpoint in Xcode. See the plus arrow in the bottom left and click on it to add a symbolic breakpoint.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/3.png" width="759" height="441" alt="3"></p>

<p>Now set a breakpoint for the <i>objc_msgSend</i> call. Click on Add action and add the debugger command as <i>p (void)printf(&#8220;[%s, %s]\n&#8221;, (char*)object_getClassName($arg1), $arg2)</i> and make sure you check the option to continue execution of the program. You will notice that you are now able to trace all the method calls.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/4.png" width="885" height="802" alt="4"></p>

<h3>Attaching cycript</h3>




<p>You can even attach Cycript to the running application process in the simulator and demonstrate POC for vulnerabilities. Cycript works for Mac as well and you use the exact syntax that you use while auditing application on your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/cycript.png" width="536" height="104" alt="Cycript"></p>

<h3>Monitoring Network traffic</h3>




<p>You can pretty much see all the network traffic over HTTP/HTTPs without any issues. You can either use Burpsuite or Charles for it. For HTTPs traffic, you will have to install the SSL certificate on your simulator. To do this, simply drag and drop the certificate file to your simulator, and click on install to install the certificate.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/cert.png" width="375" height="484" alt="Cert"></p>

<p>That&#8217;s it for this article. In the next article, we will look at using the LLDB debugger for debugging iOS applications.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Damn Vulnerable iOS App solutions free for download]]></title>
    <link href="http://prateek147.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download"/>
    <updated>2015-04-03T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download</id>
    <content type="html"><![CDATA[<p>I have decided to give away the solutions for DVIA for free. The reason for this has been too many people coming up with queries for the solutions and i believed giving away the solutions for free would really benefit the infosec community. It has taken me a lot of nights and hard work to create this project and specially the solutions. If you think this project has been useful to you and your organization, please consider making a donation to this project. You can donate to this project and download the solutions for free from <a href="http://damnvulnerableiosapp.com/#solutions">here</a>.</p>

<p>-Prateek</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 4]]></title>
    <link href="http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4"/>
    <updated>2015-03-29T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4</id>
    <content type="html"><![CDATA[<p>In this article, we will look at a very handy framework for analysis of android applications named Drozer. Drozer is a very useful tool as it eliminates the need for having seperate tools for performing different security checks in an android application. It has a list of modules that you can use to interact with the application using Android&#8217;s Inter-Process communication. Additionally, you can also install exploits and use it to exploit an android device.</p>




<p>The main purpose of this article is to make sure you are familiar with drozer so we can use it in the future articles. </p>




<!-- more -->




<p>The first thing to do is to install the drozer community edition from <a href="https://www.mwrinfosecurity.com/products/drozer/">this</a> link. You need to install both the drozer installer and the Agent.apk file which is the application that needs to be deployed on the device/emulator and acts as a communicator between the system and the application to be audited. </p>




<p>Once drozer has been installed on your system, install the agent.apk on your device/emulator.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/1.png" width="600" height="90" alt="1"></p>

<p>You will first need to set up port forwarding so that your system can connect to a TCP socket opened by the Agent inside the emulator, or on the device. By default, drozer uses port 31415:</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/2.png" width="800" height="54" alt="2"></p>

<p>Also make sure to start the agent application and start the server.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/3.png" width="513" height="277" alt="3"></p>

<p>Now you can connect to the agent using the following command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/4.png" width="750" height="360" alt="4"></p>

<p>You can list all the different modules by using the list command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/5.png" width="900" height="220" alt="5"></p>

<p>Every module requires different options. If you want to see the different options for a particular module, use run followed by the module name followed by -h.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/6.png" width="900" height="420" alt="6"></p>

<p>For e.g, to see a list of all the packages installed, you can use the module app.package.list.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/7.png" width="500" height="220" alt="7"></p>

<p>Now, to find info about a particular packages, use the module app.package.info. It will give out a lot of info about the application, for e.g the path where the application files are stored, the permissions that the application uses etc.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/8.png" width="550" height="280" alt="8"></p>

<p>Another useful module is app.package.attacksurface. It tells you about the exported components as well as whether the application is debuggable or not. We will look at exploiting debuggable applications in later articles.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/9.png" width="500" height="120" alt="9"></p>

<p>Now, let&#8217;s do the same thing we did in the last article, call an exported activity in the insecure bank application. For that, we will use the module app.activity.start.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/10.png" width="800" height="32" alt="10"></p>

<p>And you will see the same result.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/11.png" width="700" height="320" alt="11"></p>

<p>In some cases, the activity might have an intent filter. For e.g, below is a sample intent filter.</p>




<p>
    
<activity android:name="ShareActivity">
    <intent-filter>
        <action android:name="android.intent.action.SEND"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <data android:mimeType="text/plain"/>
    </intent-filter>
</activity>
</p>




<p>Drozer supports calling activities by specifying actions and extra paramters also.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/12.png" width="700" height="245" alt="12"></p>

<p>Here is an example of calling an activity with extra parameter</p>




<p><i>
run app.activity.start &#8211;component com.mwr.example.intenttest com.mwr.example.intenttest.IntentActivity &#8211;flags ACTIVITY_NEW_TASK &#8211;extra string URL &#8220;Some Text&#8221;
</i></p>




<p>In this article, we got comfortable with using Drozer. Drozer can do much more, and we will be discussing all those features as we discuss more vulnerabilities in InsecureBank in the next article.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 3]]></title>
    <link href="http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3"/>
    <updated>2015-03-28T00:17:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3</id>
    <content type="html"><![CDATA[<p>In this article, we will look at attacking components in Android applications, starting with activities. But first, it is essential to understand what Android application components are. Android application components are the essential building blocks of an Android application. The behaviour and interaction between these components is defined in the manifest.xml file in the application. Mainly there are 4 types of components and it is important to understand their purpose and function.</p>




<p>The description of the 4 components given below has been taken from <a href="http://www.tutorialspoint.com/android/android_application_components.htm">this</a> link.</p>




<!-- more -->




<table>
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Activities</td><td>They dictate the UI and handle the user interaction to the smartphone screen</td></tr>
<tr><td>Services</td><td>They handle background processing associated with an application.</td></tr>
<tr><td>Broadcast Receivers</td><td>They handle communication between Android OS and applications.</td></tr>
<tr><td>Content Providers</td><td>They handle data and database management issues.</td></tr>
</table>


<h4>Activities</h4>


<p>An activity represents a single screen with a user interface. For example, an email application might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. If an application has more than one activity, then one of them should be marked as the activity that is presented when the application is launched.</p>

<p>An activity is implemented as a subclass of Activity class as follows:</p>

<pre>public class MainActivity extends Activity {

}</pre>




<h4>Services</h4>


<p>A service is a component that runs in the background to perform long-running operations. For example, a service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity.</p>

<p>A service is implemented as a subclass of Service class as follows:</p>

<pre>public class MyService extends Service {

}</pre>


<h4>Broadcast Receivers</h4>


<p>Broadcast Receivers simply respond to broadcast messages from other applications or from the system. For example, applications can also initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver who will intercept this communication and will initiate appropriate action.</p>

<p>A broadcast receiver is implemented as a subclass of BroadcastReceiver class and each message is broadcasted as an Intent object.</p>

<pre>public class MyReceiver  extends  BroadcastReceiver {

}</pre>


<h4>Content Providers</h4>


<p>A content provider component supplies data from one application to others on request. Such requests are handled by the methods of the ContentResolver class. The data may be stored in the file system, the database or somewhere else entirely.

A content provider is implemented as a subclass of ContentProvider class and must implement a standard set of APIs that enable other applications to perform transactions.</p>




<pre>public class MyContentProvider extends  ContentProvider {

}</pre>




<h4>Additional Components</h4>


<p>There are additional components which will be used in the construction of above mentioned entities, their logic, and wiring between them. These components are:</p>

<table class="src">
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Fragments</td><td>Represents a behavior or a portion of user interface in an Activity.</td></tr>
<tr><td>Views</td><td>UI elements that are drawn onscreen including buttons, lists forms etc.</td></tr>
<tr><td>Layouts</td><td>View hierarchies that control screen format and appearance of the views.</td></tr>
<tr><td>Intents</td><td>Messages wiring components together.</td></tr>
<tr><td>Resources</td><td>External elements, such as strings, constants and drawables pictures.</td></tr>
<tr><td>Manifest</td><td>Configuration file for the application.</td></tr>
</table>




<h4>One of the most important attributes of components is the exported property. Here is the documentation from android about it.</h4>




<h4>android:exported</h4>




<p>Whether or not the activity can be launched by components of other applications — &#8220;true&#8221; if it can be, and &#8220;false&#8221; if not. If &#8220;false&#8221;, the activity can be launched only by components of the same application or applications with the same user ID.The default value depends on whether the activity contains intent filters. The absence of any filters means that the activity can be invoked only by specifying its exact class name. This implies that the activity is intended only for application-internal use (since others would not know the class name). So in this case, the default value is &#8220;false&#8221;. On the other hand, the presence of at least one filter implies that the activity is intended for external use, so the default value is &#8220;true&#8221;.This attribute is not the only way to limit an activity&#8217;s exposure to other applications. You can also use a permission to limit the external entities that can invoke the activity (see the permission attribute).</p>




<p>Hence, if an activity is exported, it can be called by external applications. In order to test the vulnerable activity exercise in InsecureBank application, let&#8217;s first start the application on Genymotion emulator and start the backend server as well.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/1.png" width="504" height="58" alt="1"></p>

<p>Once we start the app, we are presented with this login page. If the activity after a successful login is exported, then we can call that activity directly.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/2.png" width="1027" height="559" alt="2"></p>

<p>Let&#8217;s have a look at the manifest file of the application to see if we can find the relevant activity. To look at the manifest file, first decompress the application using apktool as shown in the image below. This will create an application folder and the manifest file will be located inside it.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/4.png" width="735" height="275" alt="4"></p>

<p>Here is how the manifest file looks like. As you can see, there is an activity named <i>.PostLogin</i> which is set as exported.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/3.png" width="888" height="626" alt="3"></p>

<p>We can call this activity directly using the activity manager tool in the emulator. Let&#8217;s have a look at the usage first.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/5.png" width="620" height="554" alt="5"></p>

<p>To start an activity with the am tool, here is the command.</p>




<pre>
adb shell
am start -n com.package.name/com.package.name.ActivityName
</pre>




<p>In this case, the package name is com.android.insecurebankv2 as can be seen from the manifest file.</p>




<p>So let&#8217;s call the PostLogin activity by using the command shown below.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/6.png" width="894" height="97" alt="6"></p>

<p>In the application, you can see that you have successfully bypassed the login page.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/7.png" width="1025" height="325" alt="7"></p>

<p>You can also call activity or other components using drozer. We will look at drozer in the next article.</p>




<p>There are a couple of ways to prevent from these kinds of vulnerabilities. First of all, the android:exported property should always be set to FALSE unless really necessary. Secondly, if the application needs to be called from some specific external applications, you can add custom permissions to the activity and only allow applications that requests that permission to call the activity.</p>




<p>Before we move on to the next article, make sure you have a proper understanding of the <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">Android manifest</a> file and the different components in an andorid application.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 39 – Sensitive information in memory]]></title>
    <link href="http://prateek147.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory"/>
    <updated>2015-03-24T00:16:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory</id>
    <content type="html"><![CDATA[<p>In this article, we will look at analyzing the memory contents of an iOS application. iOS applications may store sensitive information like passwords, session IDs etc in the memory of the application without releasing them. In some cases, releasing these variables may not be an option. For e.g, it might be required for the application to send an authentication token with every request and hence there has to be a reference to it in the memory somewhere. Even though these variables might be encrypted when stored locally in the application, these variables will be in their unencryped format while the application is running. Hence, analyzing the contents of the memory is an important thing while pentesting an iOS application. If there are some important properties or instance variables that are not required, they should be released from the memory.</p>




<p>Basically, the memory of the application will contain a lot of information, most of which we will not be interested in. These things might include instantiated UIViews and other UI elements. We will definitely be interested in instantiated view controllers and their properties though. It is important to understand and focus on only the relevant information in the memory. For a penetration tester, you should mainly be interested in all the values of the properties and instance variable in an application.</p>




<!-- more -->




<p>We will be solving the Sensitive information in memory challenge in <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS application</a></p>


<p>.</p>

<p><img src="http://prateek147.github.io/images/posts/ios39/1.PNG" width="320" height="568" alt="1"></p>

<p>If we look at the challenges, the first challenge is to find properties named username and password. To do that, first we have to get the reference to the current view controller. From the class-dump output of the application, it is easy to figure out that the class name of this view controller is <i>SensitiveInformationDetailsVC</i>. We can find the reference to this class objects using the choose function in cycript. The choose function takes an Objective-C class as an argument, and attempts to scavenge the heap looking for regions of memory that are the right size and shape as the class (or any subclasses of that class) you have specified. So basically, it will find references to all objects of the classes and subclasses that you have provided.</p>


<p></p>

<p>Hence, to find the instances of the class <i>SensitiveInformationDetailsVC</i>, let&#8217;s use the choose function with the class name as the argument.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/2.png" width="469" height="81" alt="2"></p>

<p>As we can see, there is only one reference, and can be accessed using the index 0.</p>




<p>To find out all properties, use the command a[0]->isa.messages.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/3.png" width="1140" height="344" alt="3"></p>

<p>Now, you can scan the output for all property names that you find interesting. Since we already know the property names in the challenge, which is username and password, we can directly access them using the commands shown below.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/4.png" width="264" height="99" alt="4"></p>

<p>That&#8217;s it. Pretty simple isn&#8217;t it.</p>




<p>Next, we need to find some instance variable. For this, we need to define a function that will print all the instance variables for a particular instance.</p>




<p>function tryPrintIvars(a){ var x={}; for(i in *a){ try{ x[i] = (*a)[i]; } catch(e){} } return x; }</p>




<p>Now, lets give the input as the instance of the class <i>SensitiveInformationDetailsVC</i> and we can see that it printed out all the instance variables along with their values.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/5.png" width="1150" height="514" alt="5"></p>

<p>However, we cannot find an instance variable named passwd. What&#8217;s going on ? Well, here&#8217;s the thing. The thing with instance variables is that they can be initialized within a particular method. If the function hasn&#8217;t been called, the instance variable wouldn&#8217;t be initialized. Also, because of a feature knows an ARC (Automatic reference counting) in iOS, the variables will automatically be released once the function has stopped executing. In some cases, you might not be able to call a function via manual browsing of the application, and that&#8217;s where cycript becomes useful. Going back to the methods of this class, we see that there is a method named <i>initializeLogin</i>. And since it is the only other method apart from the regular iOS methods like viewDidLoad and didReceiveMemoryWarning, it is safe to assume that the instance variable is created in this method.</p>


<p></p>

<p>Once we call the function initializeLogin, the instance variable will instantiate and be stored in the memory of the application. The trick here is to use GDB to analye the application contents during the runtime and find the value of the variable before the function stops executing.. I will leave this as an exercise for you. And just for the sake of convenience, here is the source code of the initializeLogin method.</p>




<pre>
-(void)initializeLogin {
    //DO random stuff
    NSString *passwd = @"MYw0r1d1821";
    //Finish doing random stuff
}</pre>


<p></p></p>

<p>Mark Beard has written a nice article on dumping application memory from the heap and also released a tool to do so. I would recommend that you check the <a href="https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/">article</a> out as well. </p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 2]]></title>
    <link href="http://prateek147.github.io/2015/03/23/android-application-hacking-with-insecure-bank-part-2"/>
    <updated>2015-03-23T00:16:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/23/android-application-hacking-with-insecure-bank-part-2</id>
    <content type="html"><![CDATA[<p>In the previous article, we looked at setting up a mobile pentesting platform for Android applications. By now, you must have set up an emulator using genymotion and installed all the android command line tools along with some other additonal tools (drozer, dex2jar, apktool). In this article, we will look at some information gathering techniques. We will see how we can decompile an application to its java source, analyze the signature of the application and many more things.</p>




<p>At this point, i would also like to mention that if you are looking for a VM that contains all the tools to cater to your android application pentesting needs, have a look at <a href="https://androidtamer.com/">Android Tamer</a>.</p>




<!-- more -->




<p>First of all, make sure you have the latest version of InsecureBankv2 on your system. You can do a <i>git pull</i> to merge all the latest changes to your master branch.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//1.png" width="649" height="422" alt="1"></p>

<p>Once this is done, let&#8217;s do some analysis on the apk file. Copy the apk file into a seperate folder for some analysis. Just like an iOS ipa file, an apk file is a compressed file, so you can decompress it by just changing the extension from apk to zip and then extracting it.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//2.png" width="873" height="378" alt="2"></p>

<p>Now browse over to the extracted folder and have a look. You can see a lot of files here.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//3.png" width="592" height="130" alt="3"></p>

<p>Let&#8217;s describe them one by one.</p>




<ul>
    <li>AndroidManifest.xml - This is probably by far the most important source of information. From a security point of view, it contains information about the various components used in an application and lists the conditions in which they can be launched. It also displays information about the permissiosns that the application uses. I would highly recommend you to go through Google&#8217;s <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">documentation</a> on the manifest file. We will discuss each component of an android application as we discuss vulnerabilities in them.</li>
    
    <li>assets - This is used to store raw assets file. The files stored here as compiled as is into the apk file.</li>
    
    <li>res - Used to store resources such as /images/posts/ib2/, layout files, and string values.</li>
    
    <li>META-INF - Contains important information about the signature and the person who signed the application.</li>
    
    <li>classes.dex - This is where the compiled application code lies. To decompile an application, you need to convert the dex file to a jar file which can then be read by a java decompiler</li>
    
    
</ul>




<p>The information about the public key certificate is stored in the CERT.RSA file in the META-INF folder. To find out information about the public key certificate, use the command <i> keytool –printcert –file META-INF/CERT.RSA </i></p>


<p><img src="http://prateek147.github.io/images/posts/ib2//z.png" width="730" height="426" alt="Z"></p>

<p>Please note that it is also possible to modify the code of an apk file after decompiling and then recompile it to deploy to a device. However, once the application code is modified, it loses its integrity and hence needs to be resigned with a new public/private key pair. I would recommend that you have a look at <a href="http://developer.android.com/tools/publishing/app-signing.html">this</a> article that explains how to create your own public/private key pair. We will look at modifying application logic and then recompiling it in later articles in this series.</p>




<p>Once an application has been recompiled, you can verify its integrity using the jarsigner application.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//j.png" width="760" height="64" alt="J"></p>

<p>Now let&#8217;s decompile the application using dex2jar. dex2jar can also take input as an apk file (rather than .dex file) and converts it into a jar file.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//x.png" width="654" height="87" alt="X"></p>

<p>Once this is done, you can simple open this file in JD-GUI and have a look at the source code.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2//y.png" width="1026" height="621" alt="Y"></p>

<p>We can now scan through the source code to find potential vulnerabilities in the application. We can clearly note how easy it is to reverse engineer an apk file and look at the source code. It is important to note here that we are able to see the source code and understand it mainly because there is no code obfuscation applied in the application. Google provides tools like Proguard to help in obfuscating code. While this is not foolproof, there is also a commercial version of Proguard knows an DexGuard that works even better in applying code obfuscation. We will look at obfuscating application code in later articles.</p>




<p>In this article, we looked at how we can extract information from an apk file. In the next article, we will start looking at the different types of vulnerabilities demonstrated in InsecurBankv2.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 38 - Attacking apps using Parse (Guest Lecture by Egor Tolstoy)]]></title>
    <link href="http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse-guest-lecture-by-egor-tolstoy"/>
    <updated>2015-01-24T00:16:00+04:00</updated>
    <id>http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse-guest-lecture-by-egor-tolstoy</id>
    <content type="html"><![CDATA[<p><b>This is a guest lecture by <a href="http://etolstoy.ru">Egor Tolstoy</a>. Egor is a full-time iOS developer working at Rambler&amp;Co and living with his lovely wife in Moscow, Russia. In his spare time he investigate iOS applications for different vulnerabilities and blogs about my research.</b></p>

<div><a href="http://parse.com/">Parse</a> is a wonderful BaaS which helps with setting up backend infrastructure for your mobile application as fast as possible. Maybe just because of this simplicity many developers forget about a number of new security issues and vulnerabilities.</div>


<div><br/></div>




<!-- more -->




<div><img src="http://prateek147.github.io/images/posts/ios38/8822BC1A-FA0D-4BFF-8DC0-8CC103DFB92D.png" height="495" width="816"/><br/></div>


<div><br/></div>


<div>For those who don’t know what this service is, let’s make a brief introduction. Parse provides a lot of useful capabilities to mobile developer: cloud data storage, push notifications, usage statistics and crash logs gathering, code hosting, background jobs and a many other things. Within the boundaries of thes research we are interested in the cloud data storage, named <i>Cloud Core</i>.</div>


<div>All the data in Cloud Core is stored in so called custom classes (ordinary database tables).</div>


<div><br/></div>




<!-- more -->


<div><img src="http://prateek147.github.io/images/posts/ios38/8879CA5B-B494-43CD-A136-1DB8059F5AC1.png" height="420" width="1043"/><br/></div>


<div><br/></div>


<div>You can set a number of different client permissions for each of these classes: <i>GET, FIND, UPDATE, CREATE, DELETE</i> and <i>ADD FIELDS</i>. All of them are <i>Public</i> by default. Of course, most of the developers forget about the need of setting client access permissions once they configure their tables.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FDF17B0E-CD2B-47AB-BB46-F0D0BE9BDE7E.png" height="535" width="403"/><br/></div>


<div><br/></div>


<div>I’ve closely faced Parse during one of my work projects and spent a lot of time configuring ACLs properly - so I became interested in how other developers maintain their Parse accounts. I’ve found the object for my little research right on <a href="https://parse.com/customers">parse.com/customers</a>. It was <a href="http://cubefreeapp.com/">Cubefree</a> - a service for locating cowering spaces.</div>


<div><br/></div>


<div>A pair of keys is used for connecting to Parse account from a mobile application: <i>Application ID</i> and <i>Client Key</i>. We’ve got to find out these strings in order to manipulate the data in Cloud Core. Let’s decrypt the application binary with the help of <a href="https://github.com/dmayer/idb">idb</a> - an awesome iOS pentesting utility. While the decryption process is going on, we can check <i>NSUserDefaults</i> - a rather common place for storing such kind of data (only for reckless developers, of course).</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/03B3C111-1C51-4330-899E-7E5873D94B7F.png" height="486" width="879"/><br/></div>


<div><br/></div>


<div>As you can see, nothing criminal was found - no signs of confidential data. Let’s get back to our decrypted application binary and feed it to <a href="http://www.hopperapp.com/">Hopper</a> - a well known disassembler, specialized in reverse-engineering Objective-C applications. Our quest for Parse keys will begin in <span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>application:didFinishLaunchingWithOptions method</i> of <i>App Delegate.</i> One of the noteworthy Hopper features is the ability to represent any procedure in pseudocode form, which flattens the reversed code understanding curve.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/AB772C3F-377A-4B02-BA39-946D0B54831C.png" height="602" width="667"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">As expected, the connection to Parse is initiated right here. Now we’ll analyse the structure of Parse data and its client permissions.</font></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">The next step is identification of Parse tables names. Actually, we can see them on the same screenshot as client keys - there is a plenty of <i>registerSubclass</i> method calls. These classes are children of the root <i>PFObject</i> class. Each of them has a method </font><span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>parseClassName, </i>which returns a corresponding Parse table name.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FC415E09-109A-460B-9E04-763532556FDB.png" height="87" width="582"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">Let’s inspect the structure of these tables:</font></div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1</a><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div>The knowledge of classes organization, however, is not enough. We should try to inspect access permissions for all the Parse classes to determine how we can influence the application behaviour. It’s quite simple - all we have to do is to make a couple of queries to Parse and analyse their results. I’ve wrote a small utility - <a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a>, which simplifies these routine actions and automatically determines the access permissions for all known classes.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/E171D146-358B-41FD-98E2-FBC293EBAFEF.png" height="694" width="592"/><br/></div>


<div><br/></div>


<div>We can create a table using all the derived data:</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82%202015-01-24%2020.41.30.png" height="761" width="738"/><br/></div>


<div><br/></div>


<div><br/></div>


<div>As we can see from the list of permissions, the developers tried to implement a security policy, but it wasn’t enough. Let’s show what we can achieve by manipulating the <i>ChatMessage</i> class.</div>


<div><br/></div>


<div>The most obvious vulnerability is that the attacker is able to modify the text of any message in any chatroom. After the execution of this code block the reasonable statement turns into a nonsense:</div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2</a><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/cubefree-screen.png" height="569" width="642"/><br/></div>


<div><br/></div>


<div>We can also post new messages to any chat by providing a new <i>PFObject</i> with a correct chatId. But we are noble pentesters, so let’s pay attention to the fact that we aren’t able to delete any message due to developers paranoia :).</div>


<div><br/></div>


<div>A much more serious vulnerability consists in incorrect data mapping algorithm. When a <i>ChatMessage</i> object doesn’t have anything in the sender field, the Cubefree application crashes. So, it’s possible to loop through all the chatrooms, post an invalid <i>ChatMessage</i> - and the application will always crash when somebody opens the chat screen. It’s fraught with bad App Store ratings, users outflow and a complete project failure.</div>


<div>There are same vulnerabilities in other classes - but they are not within the scope of current investigation.</div>


<div><br/></div>


<div>As for security of your own applications - everything is quite transparent, just follow these simple rules:</div>


<ul>
<li>Always configure client permissions for all of your Parse classes.</li>
<li>Make use of user-based ACLs - it’s a great Parse feature.</li>
<li>If a client should be able to modify only one property of your class, think of encapsulating this field in the separate class. By doing it you will circumvent the possibility of illegal changes in your objects.</li>
<li>Don’t rely on Parse - always do a proper validity check of the data it returns you.</li>
<li>Remember that, theoretically, applicationID and clientKey can be found by any attacker, so you should build your application security grounding on this knowledge.</li>
<li>The previous advice doesn’t cancel the necessarily of obfuscating strings in code :)</li>
<li>Use Cloud Code in more complex situations.</li>
</ul>


<div><br/></div>


<div>If you recognise some of your applications in this research, don’t blame Parse - it’s the amazing service, which minimize backend developing costs. All of the examined vulnerabilities lie heavy on the developers conscience.</div>


<div><br/></div>


<div>Further reading:</div>


<ul>
<li><a href="https://www.parse.com/docs">Parse Documentation</a></li>
<li><a href="http://blog.parse.com/2014/06/30/parse-security-i-are-you-the-key-master">A small series of articles about Parse security</a></li>
<li><a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a></li>
<li><a href="http://highaltitudehacks.com/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper/">iOS Application Security Part 28 - Patching iOS Application With Hopper</a><br/></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2012-01-06-the-hopper-disassembler.html">The Hopper Disassembler by Mike Ash</a></li>
</ul>


<div> </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 37 - Adapting to iOS 8]]></title>
    <link href="http://prateek147.github.io/2014/12/20/ios-application-security-part-37-adapting-to-ios-8"/>
    <updated>2014-12-20T00:27:00+04:00</updated>
    <id>http://prateek147.github.io/2014/12/20/ios-application-security-part-37-adapting-to-ios-8</id>
    <content type="html"><![CDATA[<p>In this article we will look at all the things you need to do to set up a pentesting platform on iOS 8 and be comfortable with using all the tools.</p>




<h3>Jailbreaking your device</h3>




<p>If your device is running iOS 8.1 or earlier, you can use <a href="http://en.pangu.io/">pangu</a> to jailbreak your device. The process is pretty straightforward. We will not be covering jailbreaking your device in this article but if you want to know how it is done, you can read <a href="http://www.redmondpie.com/how-to-jailbreak-ios-8.1-untethered-using-pangu8/">this</a> article.</p>




<!-- more -->




<p><i>Note: I was getting an error with Pangu saying that there was not enough space on my device even though there was enough space. I tried by putting my device into Airplane mode and by turning off Wifi on my laptop and it worked for me.</i></p>




<p>Once you jailbreak your device, you can install OpenSSH in your device using Cydia and get connectivity to your device.</p>




<h3>Location of applications</h3>




<p>One of the major changes within the file structure is that the user applications are no longer located at the location <i>/var/mobile/Applications</i>. The application bundle is stored in the location <i>/var/mobile/Containers/Bundle/Application</i> (Appname.app) whereas the application data (Documents, Library, tmp folder) is stored in the location <i>/var/mobile/Containers/Data/Application</i>. The name of the folder (a unique ID) will also be different for the same application. So while checking an application, it is recommended to look at both the locations.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//location1.png" width="848" height="236" alt="Location1">
<img src="http://prateek147.github.io/images/posts/ios37//location2.png" width="809" height="178" alt="Location2"></p>

<p>However, the applications that are installed by default on your device with iOS are still located in the location <i>/Applications/</i>. For e.g, the App store application can be seen in the below image.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//appstore.png" width="593" height="297" alt="Appstore"></p>

<h3>Decrypting applications</h3>




<p>You can download the latest version of clutch to decrypt iOS 8 applications from <a href="https://github.com/KJCracks/Clutch/releases">here</a>. You can download the binary for 1.4.7-git2 as of now. Once you download it on your device, just run it once and then run it again and it will show you the list of encrypted applications on your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//1.png" width="494" height="496" alt="1"></p>

<p>Simply type Clutch followed by the app name to start decrypting it.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//2.png" width="683" height="428" alt="2"></p>

<p><img src="http://prateek147.github.io/images/posts/ios37//3.png" width="622" height="295" alt="3"></p>

<h3>File explorer utilities</h3>




<p>Because of the change in the location where applications store data, iExplorer now looks inside the folder <i>/var/mobile/Containers/Data/Application</i>. It however, doesn&#8217;t look into the application bundle. The same goes for iFunbox, which is another good file explorer utility for iOS devices. It is however recommended that you also look inside the application bundle folder also while testing an iOS application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//iexplorer.png" width="435" height="245" alt="Iexplorer"></p>

<h3>Cycript & class-dump-z</h3>




<p>Cycript and class-dump-z both work well on iOS 8 devices. However, please make sure you are using the latest version of cycript (0.9.502 at the time of writing).</p>




<h3>Dumping keychain</h3>




<p><a href="https://github.com/ptoomey3/Keychain-Dumper">Keychain dumper</a> works just fine and can still dump all your keychain items in your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37//keychain.png" width="436" height="102" alt="Keychain"></p>

<h3>Swift</h3>




<p>According to Apple, Swift is a new programming language for iOS and OS X apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works. In the future articles, we will learn how to use cycript to analyze applications written in swift. However, i recommend you to start learning swift. One of the best resources to learn it from apart from Apple&#8217;s documentation is on <a href="http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start">Ray Wenderlich&#8217;s blog.</a> Also, i would like to point out that it might take some time for this language to catch up and be actually used for developing iOS applications. We will cover swift in later articles in this series.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Damn Vulnerable iOS App v1.4 launched]]></title>
    <link href="http://prateek147.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched"/>
    <updated>2014-12-01T18:07:00+04:00</updated>
    <id>http://prateek147.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched</id>
    <content type="html"><![CDATA[<p>I am so excited to release the latest version of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app for iOS 8.</a> Up till now, DVIA has been downloaded more than 75000 times and i can&rsquo;t wait for the count to reach 6 digits :&ndash;)</p>

<p>Following vulnerabilities and challenges have been added in the latest version.</p>

<ol>
<li>Sensitive information in memory</li>
<li> Webkit Caching (Insecure data storage)</li>
<li>Certificate pinning bypass </li>
</ol>


<p>You can download the latest version from <a href="http://damnvulnerableiosapp.com/#downloads">here</a>.
The source code is available on the project&rsquo;s github page <a href="https://github.com/prateek147/DVIA">here</a>.</p>

<h3>Manual Installation</h3>


<p>The easiest way is to install the application from Cydia. Add the source repo.kylelevin.com and search for DamnVulnerableiOSApp.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/3.png" width="320" height="568" alt="3"></p>

<!-- more -->


<p>You can directly download the deb file also on your device and use dpkg -i DamnVulnerableiOSApp.deb to install the application followed by the command <i>uicache</i></p>

<p><img src="http://prateek147.github.io/images/posts/dvia/4.png" width="719" height="156" alt="4"></p>

<p>Or you can download the .ipa file from the <a href="http://damnvulnerableiosapp.com/#downloads">downloads</a> page, change its name from DamnVulnerableiOSApp.ipa to DamnVulnerableIOSApp.zip and unzip this file. This will unzip to a folder named Payload. Inside it, there will be a file named DamnVulnerableIOSApp.app. Then copy the .app file to the /Applications directory on the device using Scp. You can also use sftp or the utility iExplorer to upload this application.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/1.png" width="1126" height="510" alt="1"></p>

<p>Now login as the mobile user, use the command su to get root privileges and give the DVIA binary executable permissions. Then use the exit command to go back as the mobile user, and use the command uicache to install the application. If this doesn’t work, you can reboot the device or try this method again.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/2.png" width="799" height="284" alt="2"></p>

<p>To compile the application, you should follow the instructions mentioned <a href="http://damnvulnerableiosapp.com/2013/12/get-started/">here</a>.</p>

<p>Any commits to the source code on Github or suggestions to improve the app are welcome.</p>

<p>Special thanks to <a href="http://twitter.com/crylico">@crylico</a> to help test the application before release and hosting the application on his repo.</p>

<p>Happy hacking !</p>

<p>-Prateek</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 1]]></title>
    <link href="http://prateek147.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1"/>
    <updated>2014-11-24T00:52:00+04:00</updated>
    <id>http://prateek147.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1</id>
    <content type="html"><![CDATA[<p>In this article series, we will learn at various concepts of Android application security while exploiting a vulnerable app InsecureBankv2. We will be looking at all the concepts from a noob&#8217;s perspective and hence i would recommend this blog series to beginners as well.</p>




<p>However, the first thing to do is set up a proper mobile pentesting platform for android application testing.</p>




<p>The first thing to do is download the Eclipse ADT bundle. You can then follow the instructions <a href="https://developer.android.com/sdk/installing/index.html?pkg=adt">here</a> to install the ADT bundle. Once this is done, make sure you install the necessary sdk packages and libraries by following the instructions <a href="https://developer.android.com/sdk/installing/adding-packages.html">here</a>.</p>




<!-- more -->




<p>Inside the adt bundle folder and inside the sdk folder, there will be two folders, one with the name <i>tools</i> and the other with the name <i>platform-tools</i>. It&#8217;s important to add the location of your SDK platform tools and tools folder to the PATH environment variable. This is because you will be using most of the command line tools included in these directories and its good to have them added in the path environment variable. The command to add any path as an environment variable is <i>export PATH=/path/to/dir:$PATH</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/1.png" width="725" height="146" alt="1"></p>

<p>Do this for both the tools and the platform-tools folder. Once this is done, you can access all the command line tools without actually browsing over to their directory. To check if this is working, type the command <i>adb</i> and see if you are able to get an output like this.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/2.png" width="728" height="417" alt="2"></p>

<p>To run the application on your computer, it is important to have a good emulator. Now the android virtual device manager utility in Eclipse allows you to create your own emulators. To know how to create these virtual devices, i would recommend you check <a href="https://developer.android.com/tools/devices/index.html">this</a> article out. However, for this series, i am going to be using Genymotion to create my own emulators. There are many reasons for this. First of all, it is lightning fast and not as slow as the android emulators. Secondly, it is a rooted emulator unlike the android emulators. This means you have much more freedom of installing your own custom applications that can be used for auditing other android apps. </p>




<p>Once you install genymotion, you should sign up for a new account (it&#8217;s free) and create different emulators based on your need. Here is what my emulators look like.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/3.png" width="798" height="427" alt="3"></p>

<p>Now get the latest code for the InsecureBankv2 application from <a href="https://github.com/dineshshetty/Android-InsecureBankv2">here</a>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/4.png" width="1046" height="137" alt="4"></p>

<p>Start one of your genymotion emulators and see if you are able to get them running. Starting an emulator is as simple as clicking on the play button.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/5.png" width="1070" height="618" alt="5"></p>

<p>Inside the folder that you just cloned from github, there will be an apk file. You can install that application onto your emulator using the command <i>adb install InsecureBankv2.apk</i></p>


<p><img src="http://prateek147.github.io/images/posts/ib1/6.png" width="939" height="134" alt="6"></p>

<p>You will see that it successfully installed. And you can see the same on the emulator as well. But sometimes you might want to compile the application rather than run it with an apk file. To do that, open Eclipse and go to <i>File -> Switch Workspace</i>, and choose the Insecure bank folder that you just created. Now go to <i>File -> Import</i> and select <i>Existing Android code into workspace</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/7.png" width="525" height="551" alt="7"></p>

<p>Select your application folder and you will see that Eclipse will import the application into your workspace. Now click on the play button on the top to run your application. Make sure your genymotion emulator is running as well. Select to run it as an android application.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/8.png" width="851" height="586" alt="8"></p>

<p>You will see that the application starts successfully on the genymotion emulator.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/9.png" width="1066" height="574" alt="9"></p>

<p>Also start the backend python server that the android application communicates with using the command <i>python app.py &#8211;port 8888</i></p>


<p><img src="http://prateek147.github.io/images/posts/ib1/10.png" width="726" height="81" alt="10"></p>

<p>In the application, go to Preferences and enter the IP address and port number of your system.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/11.png" width="612" height="472" alt="11"></p>

<p>And now you can login to the application using the default credentials.</p>




<ul>
<li>dinesh/Dinesh@123$</li>
<li>jack/Jack@123$</li>
</ul>




<p>Also make sure that you install the following utilities. We will cover them in detail as and when they are required.</p>




<ol>
    <li><a href="https://www.mwrinfosecurity.com/products/drozer/">Drozer</a></li>
    <li><a href="https://github.com/swdunlop/AndBug">Andbug</a></li>
    <li><a href="https://github.com/iSECPartners/Introspy-Android">Introspy</a></li>
    <li><a href="https://code.google.com/p/dex2jar/">dex2jar</a></li>
    <li><a href="https://code.google.com/p/android-apktool/">apktool</a></li>
</ol>




<p>Also, connect to your emulator using the command <i>adb shell</i> and see what are the things you can do. I would really recommend you to have a look <a href="http://developer.android.com/tools/help/adb.html">here</a> and try out all the commands possible with the Android debug bridge.</p>




<p>Another thing that you can read up is what you can do with all the command line tools available in Android. You can read it from <a href="http://developer.android.com/tools/projects/projects-cmdline.html">here</a>. In the next article, we will start at actual exploitation of the InsecureBankv2 application.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 36 – Bypassing certificate pinning using SSL Kill switch]]></title>
    <link href="http://prateek147.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch"/>
    <updated>2014-11-03T01:00:00+04:00</updated>
    <id>http://prateek147.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch</id>
    <content type="html"><![CDATA[<p>In this article, we will look at how we can analyze network traffic for applications that use certificate pinning. One of the best definitions i found of certificate pinning is mentioned below. It is taken directly from <a href="https://www.infinum.co/the-capsized-eight/articles/securing-mobile-banking-on-android-with-ssl-certificate-pinning">this</a> url.</p>




<p>
By default, when making an SSL connection, the client checks that the server’s certificate:</p>




<ul>
<li>has a verifiable chain of trust back to a trusted (root) certificate</li>
<li>matches the requested hostname</li>
<li>What it doesn&#8217;t do is check if the certificate in question is a specific certificate, namely the one you know your server is using.</li>
</ul>




<!-- more -->


<p>Relying on matching certificates between the device&rsquo;s trust store and the remote server opens up a security hole. The device’s trust store can easily be compromised &ndash; the user can install unsafe certificates, thus allowing potential man-in-the-middle attacks.</p>

<p>Certificate pinning is the solution to this problem. It means hard-coding the certificate known to be used by the server in the mobile application. The app can then ignore the device’s trust store and rely on its own, and allow only SSL connections to hosts signed with certificates stored inside the application.</p>

<p>This also gives a possibility of trusting a host with a self-signed certificate without the need to install additional certificates on the device.
</p></p>

<p>Certificate pinning is used by many popular applications for e.g Twitter, Square etc. So the question that arises is, how do you bypass this certificate validation that is happening on the client side ? The important thing to note here is all that all the validation is happening on the client side. And since there are frameworks like Mobile Substrate that allow us to patch any method during runtime and modify its implementation, it is possible to disable the certificate validation that is happening in the application.</p>




<p>A POC tool for this by released in Blackhat and it was named iOS SSL Kill Switch. The full presentation can be found <a href="https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf">here</a>. After some time, the author realized that he was able to inspect traffic from apps that used certificate pinning (for e.g Twitter), but he wasn&#8217;t able to see the traffic going through the App Store app. He then realized he needed to patch even more low level methods and kill specific processes in order to inspect traffic going via the App store app. The full writeup for this could be found <a href="https://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-iOS/">here</a> and it&#8217;s quite interesting, so i suggest you give it a read. Also note that this tool will also be able to disable the default SSL certificate validation, so you don&#8217;t need to install a certificate as trusted root as well, which is what we usually do for inspeting traffic over HTTPs.</p>




<p>To really check that the Twitter app uses certificate pinning, install the Twitter app and route the device traffic through Burp Proxy. Make sure you are inspect traffic via HTTP/HTTPS using the steps mentioned in <a href="http://highaltitudehacks.com/2013/08/20/iOS-application-security-part-11-analyzing-network-traffic-over-http-slash-https">Part 11</a> of this series. However, when you open the twitter app and navigate around, the traffic is not captured by Burpsuite.</>




<p>To inspect the traffic going via Twitter, ssh into your device and download the iOS SSL Kill Switch package from it&#8217;s <a href="https://github.com/iSECPartners/iOS-ssl-kill-switch/releases">releases</a> link. Also, make sure to install the following packages via Cydia.</p>




<ul>
<li>dpkg</li>
<li>MobileSubstrate</li>
<li>PreferenceLoader</li>
</ul>




<p>Now install the deb package using the command <i>dpkg -i <packagename></i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/1.png" width="967" height="134" alt="1"></p>

<p>Now, respring the device using the command <i>killall -HUP SpringBoard</i>.</p>




<p>Once this is done, go to Settings app. There will be a new menu for SSK Kill Switch and a slider to Disable certificate validation. Make sure the slider is set to on.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/2.png" width="832" height="254" alt="2"></p>

<p>Now route the traffic in the device to pass through Burp Proxy. Open twitter app and now you can see all the data going through via the twitter app as well.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/3.png" width="1045" height="451" alt="3"></p>

<p>To verify that SSL Kill Switch is being injected into the application, go to Xcode -> Devices (I am using Xcode 6), look for your device in the left menu and click on the arrow pointing up in the lower left corner to see the device logs. You will see that SSL Kill Switch is being injected into the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/4.png" width="598" height="123" alt="4"></p>

<p>Another cool utility that does the same job is <a href="https://github.com/intrepidusgroup/trustme">trustme</a>. I recommend you check it out.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wifite Walkthrough part 2: Cracking WPA access points]]></title>
    <link href="http://prateek147.github.io/2014/10/27/wifite-walkthrough-part-2-cracking-wpa-access-points"/>
    <updated>2014-10-27T01:43:00+04:00</updated>
    <id>http://prateek147.github.io/2014/10/27/wifite-walkthrough-part-2-cracking-wpa-access-points</id>
    <content type="html"><![CDATA[<p>In this article, we will look at cracking access points using WPA-PSK or WPA2-PSK using Wifite.</p>




<p>If you have used tools like airodump-ng, aircrack-ng etc to crack WPA access points before, you would know that the required thing to successfully crack a WPA-PSK network is a captured WPA four-way handshake. More details about the WPA four-way handshake can be found on <a href="http://en.wikipedia.org/wiki/IEEE_802.11i-2004">this</a> wikipedia page.</p>




<p>As mentioned in the previous article, there is a bug in Wifite that may or may not be there in your particular version of Wifite. The bug basically doesn&#8217;t aireplay-ng to function properly and displays an error like <i>aireplay-ng exited unexpectedly </i>. In order to fix this, you will have to make slight modifications in the code of wifite. You can install gedit (apt-get install gedit) which is a text editor and then edit the wifite python script (found in /usr/bin/wifite) using the steps mentioned <a href="https://code.google.com/p/wifite/issues/detail?id=127">here</a>. To open wifite, use the command <i>gedit /usr/bin/wifite</i>. This will open up the source code of wifite. Then replace every occurence of <i>cmd = [&#8216;aireplay-ng&#8217;,</i> with <i>cmd = [&#8216;aireplay-ng&#8217;,&#8217;&#8211;ignore-negative-one&#8217;,</i></p>




<!-- more -->




<p>To start wifite for cracking a WPA access point, give it the option <i>-wpa</i> to only target WPA networks. Also, give it a dictionary file as an input for cracking the WPA passphrase with the <i>-dict</i> option. In kali linux, the wordlists are stored at the location <i>/usr/share/wordlists</i>. Wifite will now start scanning for WPA access points.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/1.png" width="947" height="316" alt="1"></p>

<p>Press Ctrl+C to give a target number. In my case, the target number is 2 which is an access point i have configured for testing purposes. The access point uses WPA2-PSK encryption with the key as &#8220;password&#8221;.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/2.png" width="741" height="443" alt="2"></p>

<p>Wifite will now start listening for the handshake. Once it has found it, it will automatically start cracking the passphrase using the dictionary file that we supplied.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/4.png" width="834" height="358" alt="4"></p>

<p>And as you can see, Wifite has successfully found the passphrase for the access point.</p>




<p>Sometimes, things may not work as smoothly. In order to capture a WPA handshake between the client and the access point, the client has to connect to the wireless network during that period when we are monitoring the network. If the client is already connected, there will be no handshake that is captured. Wifite does this by automatically sending deauthentication packets to a particular client or a broadcast deauthentication packet if it is required. You can specify the time between deauthentication packets using the -wpadt flag. Hence, when the client tries to reconnect to the access point, the handshake is captured.</p>




<p>You can also specify which tool you want to use to crack the passphrase once the four-way handshake has been successfully captured. By default, aircrack-ng is selected. You can also use cowpatty, pyrit or tshark to crack the passphrase.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/5.png" width="622" height="92" alt="5"></p>

<p>Another cool option in Wifite is to anonymize your MAC address using the <i>-mac</i> option. Even though it is quite trivial using simple commands or <i>macchanger</i> utility to change the MAC address for a specific interface, it is good to have this feature in the tool itself. However, in order to make this work, you first have to take that specific interface for which you want to change the MAC address down to managed mode if it is in monitor mode previously. You can use the command <i>iwconfig</i> to check all the interfaces that are in monitor mode and then take them down using the command <i>airmon-ng stop interface-name</i> command. As we can see from the image below, the mon0 interface is in monitor mode.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/6.png" width="698" height="287" alt="6"></p>

<p>Hence, lets take it down using the command <i>airmon-ng stop mon0</i></p>


<p>.</p>

<p><img src="http://prateek147.github.io/images/posts/wifite2/7.png" width="678" height="351" alt="7"></p>

<p>Now we can add the <i>-mac</i> option to anonymize the MAC address. As you can see, Wifite is intelligent enough to change the MAC address to something that is similar the existing MAC address of the interface and not to something ridiculous (for e.g AA:BB:CC:DD:EE:FF) which is a giveaway.</p>


<p><img src="http://prateek147.github.io/images/posts/wifite2/8.png" width="895" height="378" alt="8"></p>

<p>And when you stop the capture, Wifite is nice enough to change the MAC address back to the original one.</p>




<p>In this article, we looked at how we can use Wifite to crack networks using WPA-PSK or WPA2-PSK. Wifite is great at its job and automates almost everything, however it is important to understand how it uses the tools like airodump-ng, aircrack-ng etc under the hood to perform its task. I would recommend that you go through the source code of Wifite and figure out how this is done.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wifite Walkthrough part 1: Cracking WEP access points]]></title>
    <link href="http://prateek147.github.io/2014/10/27/wifite-walkthrough-part-1-cracking-wep-access-points"/>
    <updated>2014-10-27T01:41:00+04:00</updated>
    <id>http://prateek147.github.io/2014/10/27/wifite-walkthrough-part-1-cracking-wep-access-points</id>
    <content type="html"><![CDATA[<p>In this article series, we will look at a tool named Wifite suitable for automated auditing of wireless networks. Most of you who have experience in wireless pentesting would use tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng to crack wireless networks. This would involve a sequence of steps, like capturing a specific numbers of IV&#8217;s in case of WEP, capturing the WPA handshake in case of WPA etc, and then subsequently using aircrack-ng to crack the password required for authentication to the network. Wifite aims to ease this process by using a wrapper over all these tools and thus making it super easy to crack Wifi networks.</p>




<p>Here is a list of features of Wifite as per its official <a href="https://code.google.com/p/wifite/">homepage</a>.</p>




<ul>
    <li>sorts targets by signal strength (in dB); cracks closest access points first</li>
    <li>automatically de-authenticates clients of hidden networks to reveal SSIDs</li>
    <li>numerous filters to specify exactly what to attack (wep/wpa/both, above certain signal strengths, channels, etc)</li>
    <li>customizable settings (timeouts, packets/sec, etc)</li> 
    <li>&#8220;anonymous&#8221; feature; changes MAC to a random address before attacking, then changes back when attacks are complete</li>
    <li>all captured WPA handshakes are backed up to wifite.py&#8217;s current directory</li>
    <li>smart WPA de-authentication; cycles between all clients and broadcast deauths</li>
    <li>stop any attack with Ctrl+C, with options to continue, move onto next target, skip to cracking, or exit</li>
    <li>displays session summary at exit; shows any cracked keys</li>
    <li>all passwords saved to cracked.txt</li>
    <li>built-in updater: ./wifite.py -upgrade</li>
</ul>




<!-- more -->




<p>Before we start using wifite, make sure you have a proper wireless card that supports packet injection. If you don&#8217;t have one, i would suggest that you buy <a href="http://www.amazon.com/Alfa-AWUS036H-802-11b-Wireless-network/dp/B002WCEWU8">this</a> card.</p>




<p><p>Note that there is a bug in Wifite that may or may not be there in your particular version of Wifite. The bug basically doesn&rsquo;t aireplay-ng to function properly and displays an error like <i>aireplay-ng exited unexpectedly </i>. In order to fix this, you will have to make slight modifications in the code of wifite. You can install gedit (apt-get install gedit) which is a text editor and then edit the wifite python script (found in /usr/bin/wifite) using the steps mentioned <a href="https://code.google.com/p/wifite/issues/detail?id=127">here</a>. To open wifite, use the command <i>gedit /usr/bin/wifite</i>. This will open up the source code of wifite. Then replace every occurence of <i>cmd = [&lsquo;aireplay-ng&rsquo;,</i> with <i>cmd = [&lsquo;aireplay-ng&rsquo;,&lsquo;&mdash;ignore-negative-one&rsquo;,</i></p>

<p><p>Wifite can be found under <i>Applications &ndash;> Kali Linux &ndash;> Wireless Attacks &ndash;> 802.11 Wireless Tools</i>. Also, note that if you are running wifite in a different VM than Kali Linux, then you have to make sure that tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng are already installed on that system. This is because Wifite is nothing but a wrapper over all these tools. Before we even start using Wifite, it is better to update to the latest version.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/1.png" width="846" height="328" alt="1"></p>

<p><p>In my case, i already have the latest version. In this tutorial, we will be targeting a simple Wifi network with WEP encryption. Just using the command <i>wifite -h</i> will give you a list of all the commands.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/2.png" width="962" height="596" alt="2"></p>

<p><p>A very tempting option would be <i>-all</i> which tries to attack every network that it finds. We will try it in later articles in this series. However, first lets take a look at all the targets that we have. To do that, use the command <i>wifite -showb</i></p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/3.png" width="930" height="331" alt="3"></p>

<p><p>Once this is done, we can see that wifite has put our network interface card into monitor mode (using airmon-ng) and started to look for clients. After a few more seconds, it will start displaying the list of access points.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/4.png" width="907" height="314" alt="4"></p>

<p><p>Note that as it is mentioned in its feature list (automatically de-authenticates clients of hidden networks to reveal SSIDs), this list will also include hidden access points. Hence, wifite can also be used to find hidden access points. In this case we will attack an access point with the BSSID 00:26:75:02:EF:65 that i have set up for testing purposes. The access point has a simple WEP password <i>1234567890</i>.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/5.png" width="777" height="290" alt="5"></p>

<p><p>To start attacking an access point, just press <i>Ctrl+C</i>. Wifite will now ask you to choose a target number from the list. The target number for my test network is 1, so let me enter that. Note that if you press <i>Ctrl+C</i> again, it will quit Wifite.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/6.png" width="750" height="80" alt="6"></p>

<p><p>You can now see that Wifite will start attempting to crack the WEP access point using the different known techniques for cracking WEP encryption. After some unsuccessful tries, it has finally begun to start attacking the access points using different techniques for cracking WEP.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/11.png" width="744" height="160" alt="11"></p>

<p><p>Once enough IV&rsquo;s are being captured, it will automatically start cracking the password.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/12.png" width="653" height="324" alt="12"></p>

<p><p>As we can see, Wifite has successfully figured out the WEP key for the access point. Wifite is an extremely useful tool for cracking wireless networks. As i mentioned previously, you need to have all the tools like airmon-ng, aireplay-ng, airodump-ng, aircrack-ng already installed on your system. To further prove the point, let&rsquo;s dive into the source code of Wifite.</p></p>

<p><img src="http://prateek147.github.io/images/posts/wifite1/10.png" width="545" height="297" alt="10"></p>

<p><p>As we can see, the python code has mentions of calling aireplay-ng. Hence, it is recommended to run Wifite inside Kali linux.</p></p>

<p><p>In the next article, we will look at some advanced usage options of Wifite.</p></p>
]]></content>
  </entry>
  
</feed>
