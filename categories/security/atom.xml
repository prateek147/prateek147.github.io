<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Prateek Gianchandani]]></title>
  <link href="http://prateek147.github.io//categories/security/atom.xml" rel="self"/>
  <link href="http://prateek147.github.io/"/>
  <updated>2015-01-25T00:02:27+04:00</updated>
  <id>http://prateek147.github.io/</id>
  <author>
    <name><![CDATA[Prateek Gianchandani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 38 - Attacking apps using Parse (Guest Lecture by Egor Tolstoy)]]></title>
    <link href="http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse"/>
    <updated>2015-01-24T23:39:00+04:00</updated>
    <id>http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse</id>
    <content type="html"><![CDATA[<p><b>This is a guest lecture by <a href="http://etolstoy.ru">Egor Tolstoy</a>. Egor is a full-time iOS developer working at Rambler&amp;Co and leaving with his lovely wife in Moscow, Russia. In his spare time he investigate iOS applications for different vulnerabilities and blogs about my research.</b></p>

<div><a href="http://parse.com/">Parse</a> is a wonderful BaaS which helps with setting up backend infrastructure for your mobile application as fast as possible. Maybe just because of this simplicity many developers forget about a number of new security issues and vulnerabilities.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/8822BC1A-FA0D-4BFF-8DC0-8CC103DFB92D.png" height="495" width="816"/><br/></div>


<div><br/></div>


<div>For those who don’t know what this service is, let’s make a brief introduction. Parse provides a lot of useful capabilities to mobile developer: cloud data storage, push notifications, usage statistics and crash logs gathering, code hosting, background jobs and a many other things. Within the boundaries of thes research we are interested in the cloud data storage, named <i>Cloud Core</i>.</div>


<div>All the data in Cloud Core is stored in so called custom classes (ordinary database tables).</div>


<div><br/></div>




<!-- more -->


<div><img src="http://prateek147.github.io/images/posts/ios38/8879CA5B-B494-43CD-A136-1DB8059F5AC1.png" height="420" width="1043"/><br/></div>


<div><br/></div>


<div>You can set a number of different client permissions for each of these classes: <i>GET, FIND, UPDATE, CREATE, DELETE</i> and <i>ADD FIELDS</i>. All of them are <i>Public</i> by default. Of course, most of the developers forget about the need of setting client access permissions once they configure their tables.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FDF17B0E-CD2B-47AB-BB46-F0D0BE9BDE7E.png" height="535" width="403"/><br/></div>


<div><br/></div>


<div>I’ve closely faced Parse during one of my work projects and spent a lot of time configuring ACLs properly - so I became interested in how other developers maintain their Parse accounts. I’ve found the object for my little research right on <a href="https://parse.com/customers">parse.com/customers</a>. It was <a href="http://cubefreeapp.com/">Cubefree</a> - a service for locating cowering spaces.</div>


<div><br/></div>


<div>A pair of keys is used for connecting to Parse account from a mobile application: <i>Application ID</i> and <i>Client Key</i>. We’ve got to find out these strings in order to manipulate the data in Cloud Core. Let’s decrypt the application binary with the help of <a href="https://github.com/dmayer/idb">idb</a> - an awesome iOS pentesting utility. While the decryption process is going on, we can check <i>NSUserDefaults</i> - a rather common place for storing such kind of data (only for reckless developers, of course).</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/03B3C111-1C51-4330-899E-7E5873D94B7F.png" height="486" width="879"/><br/></div>


<div><br/></div>


<div>As you can see, nothing criminal was found - no signs of confidential data. Let’s get back to our decrypted application binary and feed it to <a href="http://www.hopperapp.com/">Hopper</a> - a well known disassembler, specialized in reverse-engineering Objective-C applications. Our quest for Parse keys will begin in <span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>application:didFinishLaunchingWithOptions method</i> of <i>App Delegate.</i> One of the noteworthy Hopper features is the ability to represent any procedure in pseudocode form, which flattens the reversed code understanding curve.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/AB772C3F-377A-4B02-BA39-946D0B54831C.png" height="602" width="667"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">As expected, the connection to Parse is initiated right here. Now we’ll analyse the structure of Parse data and its client permissions.</font></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">The next step is identification of Parse tables names. Actually, we can see them on the same screenshot as client keys - there is a plenty of <i>registerSubclass</i> method calls. These classes are children of the root <i>PFObject</i> class. Each of them has a method </font><span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>parseClassName, </i>which returns a corresponding Parse table name.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FC415E09-109A-460B-9E04-763532556FDB.png" height="87" width="582"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">Let’s inspect the structure of these tables:</font></div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1</a><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div>The knowledge of classes organization, however, is not enough. We should try to inspect access permissions for all the Parse classes to determine how we can influence the application behaviour. It’s quite simple - all we have to do is to make a couple of queries to Parse and analyse their results. I’ve wrote a small utility - <a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a>, which simplifies these routine actions and automatically determines the access permissions for all known classes.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/E171D146-358B-41FD-98E2-FBC293EBAFEF.png" height="694" width="592"/><br/></div>


<div><br/></div>


<div>We can create a table using all the derived data:</div>


<div>(&lt;table&gt;&lt;tr&gt;&lt;th&gt;Class Name&lt;/th&gt;&lt;th&gt;Data Structure&lt;/th&gt;&lt;th&gt;Access Permissions&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ChatRoom&lt;/td&gt;&lt;td&gt;chatId (String) &lt;br&gt;user1 (User) &lt;br&gt;user2 (User)&lt;/td&gt;&lt;td&gt;GET: False &lt;br&gt;FIND: True &lt;br&gt;UPDATE: True &lt;br&gt;CREATE: True &lt;br&gt;DELETE: False &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Checkin&lt;/td&gt;&lt;td&gt;availableToShareTable (Bool) &lt;br&gt;date (Date) &lt;br&gt;invisible (Bool) &lt;br&gt;statusCheckin (String) &lt;br&gt;statusUser (String) &lt;br&gt;user (User) &lt;br&gt;workspace (Workspace)&lt;/td&gt;&lt;td&gt;GET: True &lt;br&gt;FIND: True &lt;br&gt;UPDATE: True &lt;br&gt;CREATE: True &lt;br&gt;DELETE: True &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ChatMessage&lt;/td&gt;&lt;td&gt;chatId (String) &lt;br&gt;Message (String) &lt;br&gt;sender (User) &lt;br&gt;unread (Bool)&lt;/td&gt;&lt;td&gt;GET: False &lt;br&gt;FIND: True &lt;br&gt;UPDATE: True &lt;br&gt;CREATE: True &lt;br&gt;DELETE: False &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Notification&lt;/td&gt;&lt;td&gt;date (Date) &lt;br&gt;sendUser (User) &lt;br&gt;chekin (Cheking) &lt;br&gt;status (Bool) &lt;br&gt;type (Number) &lt;br&gt;accepted (Bool)&lt;/td&gt;&lt;td&gt;GET: True &lt;br&gt;FIND: True &lt;br&gt;UPDATE: True &lt;br&gt;CREATE: True &lt;br&gt;DELETE: False &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Review&lt;/td&gt;&lt;td&gt;date (Date) &lt;br&gt;parkingStatus (Number) &lt;br&gt;powerStatus (Number) &lt;br&gt;soundStatus (Number) &lt;br&gt;user (PFUser) &lt;br&gt;wifiStatus (Number) &lt;br&gt;workspace (Workspace)&lt;/td&gt;&lt;td&gt;GET: True &lt;br&gt;FIND: True &lt;br&gt;UPDATE: False &lt;br&gt;CREATE: True &lt;br&gt;DELETE: False &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Workspace&lt;/td&gt;&lt;td&gt;address (String) &lt;br&gt;cc (String) &lt;br&gt;city (String) &lt;br&gt;country (String) &lt;br&gt;foursquareId (String) &lt;br&gt;lat (String) &lt;br&gt;lng (String) &lt;br&gt;location (PFGeoPoint) &lt;br&gt;name (String) &lt;br&gt;postalCode (String) &lt;br&gt;state (String)&lt;/td&gt;&lt;td&gt;GET: True &lt;br&gt;FIND: True &lt;br&gt;UPDATE: True &lt;br&gt;CREATE: True &lt;br&gt;DELETE: False &lt;br&gt;ADD FIELDS: True&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;)</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82%202015-01-24%2020.41.30.png" height="761" width="738"/><br/></div>


<div><br/></div>


<div><br/></div>


<div>As we can see from the list of permissions, the developers tried to implement a security policy, but it wasn’t enough. Let’s show what we can achieve by manipulating the <i>ChatMessage</i> class.</div>


<div><br/></div>


<div>The most obvious vulnerability is that the attacker is able to modify the text of any message in any chatroom. After the execution of this code block the reasonable statement turns into a nonsense:</div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2</a><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/cubefree-screen.png" height="1138" width="1284"/><br/></div>


<div><br/></div>


<div>We can also post new messages to any chat by providing a new <i>PFObject</i> with a correct chatId. But we are noble pentesters, so let’s pay attention to the fact that we aren’t able to delete any message due to developers paranoia :).</div>


<div><br/></div>


<div>A much more serious vulnerability consists in incorrect data mapping algorithm. When a <i>ChatMessage</i> object doesn’t have anything in the sender field, the Cubefree application crashes. So, it’s possible to loop through all the chatrooms, post an invalid <i>ChatMessage</i> - and the application will always crash when somebody opens the chat screen. It’s fraught with bad App Store ratings, users outflow and a complete project failure.</div>


<div>There are same vulnerabilities in other classes - but they are not within the scope of current investigation.</div>


<div><br/></div>


<div>As for security of your own applications - everything is quite transparent, just follow these simple rules:</div>


<ul>
<li>Always configure client permissions for all of your Parse classes.</li>
<li>Make use of user-based ACLs - it’s a great Parse feature.</li>
<li>If a client should be able to modify only one property of your class, think of encapsulating this field in the separate class. By doing it you will circumvent the possibility of illegal changes in your objects.</li>
<li>Don’t rely on Parse - always do a proper validity check of the data it returns you.</li>
<li>Remember that, theoretically, applicationID and clientKey can be found by any attacker, so you should build your application security grounding on this knowledge.</li>
<li>The previous advice doesn’t cancel the necessarily of obfuscating strings in code :)</li>
<li>Use Cloud Code in more complex situations.</li>
</ul>


<div><br/></div>


<div>If you recognise some of your applications in this research, don’t blame Parse - it’s the amazing service, which minimize backend developing costs. All of the examined vulnerabilities lie heavy on the developers conscience.</div>


<div><br/></div>


<div>Further reading:</div>


<ul>
<li><a href="https://www.parse.com/docs">Parse Documentation</a></li>
<li><a href="http://blog.parse.com/2014/06/30/parse-security-i-are-you-the-key-master">A small series of articles about Parse security</a></li>
<li><a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a></li>
<li><a href="http://highaltitudehacks.com/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper/">iOS Application Security Part 28 - Patching iOS Application With Hopper</a><br/></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2012-01-06-the-hopper-disassembler.html">The Hopper Disassembler by Mike Ash</a></li>
</ul>


<div> </div>


<p></body></html></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 37 - Adapting to iOS 8]]></title>
    <link href="http://prateek147.github.io/2014/12/21/ios-application-security-part-37-adapting-to-ios-8"/>
    <updated>2014-12-21T00:14:00+04:00</updated>
    <id>http://prateek147.github.io/2014/12/21/ios-application-security-part-37-adapting-to-ios-8</id>
    <content type="html"><![CDATA[<p>In this article we will look at all the things you need to do to set up a pentesting platform on iOS 8 and be comfortable with using all the tools.</p>




<h3>Jailbreaking your device</h3>




<p>If your device is running iOS 8.1 or earlier, you can use <a href="http://en.pangu.io/">pangu</a> to jailbreak your device. The process is prerry straightforward. We will not be covering jailbreaking your device in this article but if you want to know how it is done, you can read <a href="http://www.redmondpie.com/how-to-jailbreak-ios-8.1-untethered-using-pangu8/">this</a> article.</p>




<p><i>Note: I was getting an error with Pangu saying that there was not enough space on my device even though there was enough space. I tried by putting my device into Airplane mode and by turning off Wifi on my laptop and it worked for me.</i></p>




<!-- more -->




<p>Once you jailbreak your device, you can install OpenSSH in your device using Cydia and get connectivity to your device.</p>




<h3>Location of applications</h3>




<p>One of the major changes within the file structure is that the user applications are no longer located at the location <i>/var/mobile/Applications</i>. The application bundle is stored in the location <i>/var/mobile/Containers/Bundle/Application</i> (Appname.app) whereas the application data (Documents, Library, tmp folder) is stored in the location <i>/var/mobile/Containers/Data/Application</i>. The name of the folder (a unique ID) will also be different for the same application. So while checking an application, it is recommended to look at both the locations.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/location1.png" width="848" height="236" alt="Location1">
<img src="http://prateek147.github.io/images/posts/ios37/location2.png" width="809" height="178" alt="Location2"></p>

<p>However, the applications that are installed by default on your device with iOS are still located in the location <i>/Applications/</i>. For e.g, the App store application can be seen in the below image.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/appstore.png" width="593" height="297" alt="Appstore"></p>

<h3>Decrypting applications</h3>




<p>You can download the latest version of clutch to decrypt iOS 8 applications from <a href="https://github.com/KJCracks/Clutch/releases">here</a>. You can download the binary for 1.4.7-git2 as of now. Once you download it on your device, just run it once and then run it again and it will show you the list of downloaded applications on your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/1.png" width="494" height="496" alt="1"></p>

<p>Simply type Clutch followed by the app name to start decrypting it.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/2.png" width="683" height="428" alt="2"></p>

<p><img src="http://prateek147.github.io/images/posts/ios37/3.png" width="622" height="295" alt="3"></p>

<h3>File explorer utilities</h3>




<p>Because of the change in the location where applications store data, iExplorer now looks inside the folder <i>/var/mobile/Containers/Data/Application</i>. It however, doesn't look into the application bundle. The same goes for iFunbox, which is another good file explorer utility for iOS devices. It is however recommended that you also look inside the application bundle folder also while testing an iOS application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/iexplorer.png" width="435" height="245" alt="Iexplorer"></p>

<h3>Cycript & class-dump-z</h3>




<p>Cycript and class-dump-z both work well on iOS 8 devices. However, please make sure you are using the latest version of cycript (0.9.502 at the time of writing).</p>




<h3>Dumping keychain</h3>




<p><a href="https://github.com/ptoomey3/Keychain-Dumper">Keychain dumper</a> works just fine and can still dump all your keychain items in your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios37/keychain.png" width="436" height="102" alt="Keychain"></p>

<h3>Swift</h3>




<p>According to Apple, Swift is a new programming language for iOS and OS X apps that builds on the best of C and Objective-C, without the constraints of C compatibility. Swift adopts safe programming patterns and adds modern features to make programming easier, more flexible, and more fun. Swift’s clean slate, backed by the mature and much-loved Cocoa and Cocoa Touch frameworks, is an opportunity to reimagine how software development works. In the future articles, we will learn how to use cycript to analyze swift objects. However, i recommend you to start learning swift. One of the best resources to learn it from apart from Apple's documentation is on <a href="http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start">Ray Wenderlich's blog.</a> Also, i would like to point out that it might take some time for this language to catch up and be actually used for developing iOS applications. We will cover swift in later articles in this series.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Damn Vulnerable iOS App v1.4 launched]]></title>
    <link href="http://prateek147.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched"/>
    <updated>2014-12-01T18:07:00+04:00</updated>
    <id>http://prateek147.github.io/2014/12/01/damn-vulnerable-ios-app-v1-dot-4-launched</id>
    <content type="html"><![CDATA[<p>I am so excited to release the latest version of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app for iOS 8.</a> Up till now, DVIA has been downloaded more than 75000 times and i can&rsquo;t wait for the count to reach 6 digits :&ndash;)</p>

<p>Following vulnerabilities and challenges have been added in the latest version.</p>

<ol>
<li>Sensitive information in memory</li>
<li> Webkit Caching (Insecure data storage)</li>
<li>Certificate pinning bypass </li>
</ol>


<p>You can download the latest version from <a href="http://damnvulnerableiosapp.com/#downloads">here</a>.
The source code is available on the project&rsquo;s github page <a href="https://github.com/prateek147/DVIA">here</a>.</p>

<h3>Manual Installation</h3>


<p>The easiest way is to install the application from Cydia. Add the source repo.kylelevin.com and search for DamnVulnerableiOSApp.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/3.PNG" width="320" height="568" alt="3"></p>

<!-- more -->


<p>You can directly download the deb file also on your device and use dpkg -i DamnVulnerableiOSApp.deb to install the application followed by the command <i>uicache</i></p>

<p><img src="http://prateek147.github.io/images/posts/dvia/4.png" width="719" height="156" alt="4"></p>

<p>Or you can download the .ipa file from the <a href="http://damnvulnerableiosapp.com/#downloads">downloads</a> page, change its name from DamnVulnerableiOSApp.ipa to DamnVulnerableIOSApp.zip and unzip this file. This will unzip to a folder named Payload. Inside it, there will be a file named DamnVulnerableIOSApp.app. Then copy the .app file to the /Applications directory on the device using Scp. You can also use sftp or the utility iExplorer to upload this application.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/1.png" width="1126" height="510" alt="1"></p>

<p>Now login as the mobile user, use the command su to get root privileges and give the DVIA binary executable permissions. Then use the exit command to go back as the mobile user, and use the command uicache to install the application. If this doesn’t work, you can reboot the device or try this method again.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia/2.png" width="799" height="284" alt="2"></p>

<p>To compile the application, you should follow the instructions mentioned <a href="http://damnvulnerableiosapp.com/2013/12/get-started/">here</a>.</p>

<p>Any commits to the source code on Github or suggestions to improve the app are welcome.</p>

<p>Special thanks to <a href="http://twitter.com/crylico">@crylico</a> to help test the application before release and hosting the application on his repo.</p>

<p>Happy hacking !</p>

<p>-Prateek</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 1]]></title>
    <link href="http://prateek147.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1"/>
    <updated>2014-11-24T00:52:00+04:00</updated>
    <id>http://prateek147.github.io/2014/11/24/android-application-hacking-with-insecure-bank-part-1</id>
    <content type="html"><![CDATA[<p>In this article series, we will learn at various concepts of Android application security while exploiting a vulnerable app InsecureBankv2. We will be looking at all the concepts from a noob's perspective and hence i would recommend this blog series to beginners as well.</p>




<p>However, the first thing to do is set up a proper mobile pentesting platform for android application testing.</p>




<p>The first thing to do is download the Eclipse ADT bundle. You can then follow the instructions <a href="https://developer.android.com/sdk/installing/index.html?pkg=adt">here</a> to install the ADT bundle. Once this is done, make sure you install the necessary sdk packages and libraries by following the instructions <a href="https://developer.android.com/sdk/installing/adding-packages.html">here</a>.</p>




<!-- more -->




<p>Inside the adt bundle folder and inside the sdk folder, there will be two folders, one with the name <i>tools</i> and the other with the name <i>platform-tools</i>. It's important to add the location of your SDK platform tools and tools folder to the PATH environment variable. This is because you will be using most of the command line tools included in these directories and its good to have them added in the path environment variable. The command to add any path as an environment variable is <i>export PATH=/path/to/dir:$PATH</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/1.png" width="725" height="146" alt="1"></p>

<p>Do this for both the tools and the platform-tools folder. Once this is done, you can access all the command line tools without actually browsing over to their directory. To check if this is working, type the command <i>adb</i> and see if you are able to get an output like this.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/2.png" width="728" height="417" alt="2"></p>

<p>To run the application on your computer, it is important to have a good emulator. Now the android virtual device manager utility in Eclipse allows you to create your own emulators. To know how to create these virtual devices, i would recommend you check <a href="https://developer.android.com/tools/devices/index.html">this</a> article out. However, for this series, i am going to be using Genymotion to create my own emulators. There are many reasons for this. First of all, it is lightning fast and not as slow as the android emulators. Secondly, it is a rooted emulator unlike the android emulators. This means you have much more freedom of installing your own custom applications that can be used for auditing other android apps. </p>




<p>Once you install genymotion, you should sign up for a new account (it's free) and create different emulators based on your need. Here is what my emulators look like.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/3.png" width="798" height="427" alt="3"></p>

<p>Now get the latest code for the InsecureBankv2 application from <a href="https://github.com/dineshshetty/Android-InsecureBankv2">here</a>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/4.png" width="1046" height="137" alt="4"></p>

<p>Start one of your genymotion emulators and see if you are able to get them running. Starting an emulator is as simple as clicking on the play button.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/5.png" width="1070" height="618" alt="5"></p>

<p>Inside the folder that you just cloned from github, there will be an apk file. You can install that application onto your emulator using the command <i>adb install InsecureBankv2.apk</i></p>


<p><img src="http://prateek147.github.io/images/posts/ib1/6.png" width="939" height="134" alt="6"></p>

<p>You will see that it successfully installed. And you can see the same on the emulator as well. But sometimes you might want to compile the application rather than run it with an apk file. To do that, open Eclipse and go to <i>File -> Switch Workspace</i>, and choose the Insecure bank folder that you just created. Now go to <i>File -> Import</i> and select <i>Existing Android code into workspace</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/7.png" width="525" height="551" alt="7"></p>

<p>Select your application folder and you will see that Eclipse will import the application into your workspace. Now click on the play button on the top to run your application. Make sure your genymotion emulator is running as well. Select to run it as an android application.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/8.png" width="851" height="586" alt="8"></p>

<p>You will see that the application starts successfully on the genymotion emulator.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/9.png" width="1066" height="574" alt="9"></p>

<p>Also start the backend python server that the android application communicates with using the command <i>python app.py --port 8888</i></p>


<p><img src="http://prateek147.github.io/images/posts/ib1/10.png" width="726" height="81" alt="10"></p>

<p>In the application, go to Preferences and enter the IP address and port number of your system.</p>


<p><img src="http://prateek147.github.io/images/posts/ib1/11.png" width="612" height="472" alt="11"></p>

<p>And now you can login to the application using the default credentials.</p>




<ul>
<li>dinesh/Dinesh@123$</li>
<li>jack/Jack@123$</li>
</ul>




<p>Also make sure that you install the following utilities. We will cover them in detail as and when they are required.</p>




<ol>
    <li><a href="https://www.mwrinfosecurity.com/products/drozer/">Drozer</a></li>
    <li><a href="https://github.com/swdunlop/AndBug">Andbug</a></li>
    <li><a href="https://github.com/iSECPartners/Introspy-Android">Introspy</a></li>
    <li><a href="https://code.google.com/p/dex2jar/">dex2jar</a></li>
    <li><a href="https://code.google.com/p/android-apktool/">apktool</a></li>
</ol>




<p>Also, connect to your emulator using the command <i>adb shell</i> and see what are the things you can do. I would really recommend you to have a look <a href="http://developer.android.com/tools/help/adb.html">here</a> and try out all the commands possible with the Android debug bridge.</p>




<p>Another thing that you can read up is what you can do with all the command line tools available in Android. You can read it from <a href="http://developer.android.com/tools/projects/projects-cmdline.html">here</a>. In the next article, we will start at actual exploitation of the InsecureBankv2 application.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 36 – Bypassing certificate pinning using SSL Kill switch]]></title>
    <link href="http://prateek147.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch"/>
    <updated>2014-11-03T01:00:00+04:00</updated>
    <id>http://prateek147.github.io/2014/11/03/ios-application-security-part-36-bypassing-certificate-pinning-using-ssl-kill-switch</id>
    <content type="html"><![CDATA[<p>In this article, we will look at how we can analyze network traffic for applications that use certificate pinning. One of the best definitions i found of certificate pinning is mentioned below. It is taken directly from <a href="https://www.infinum.co/the-capsized-eight/articles/securing-mobile-banking-on-android-with-ssl-certificate-pinning">this</a> url.</p>




<p>
By default, when making an SSL connection, the client checks that the server’s certificate:</p>




<ul>
<li>has a verifiable chain of trust back to a trusted (root) certificate</li>
<li>matches the requested hostname</li>
<li>What it doesn't do is check if the certificate in question is a specific certificate, namely the one you know your server is using.</li>
</ul>




<!-- more -->


<p>Relying on matching certificates between the device&rsquo;s trust store and the remote server opens up a security hole. The device’s trust store can easily be compromised &ndash; the user can install unsafe certificates, thus allowing potential man-in-the-middle attacks.</p>

<p>Certificate pinning is the solution to this problem. It means hard-coding the certificate known to be used by the server in the mobile application. The app can then ignore the device’s trust store and rely on its own, and allow only SSL connections to hosts signed with certificates stored inside the application.</p>

<p>This also gives a possibility of trusting a host with a self-signed certificate without the need to install additional certificates on the device.
</p></p>

<p>Certificate pinning is used by many popular applications for e.g Twitter, Square etc. So the question that arises is, how do you bypass this certificate validation that is happening on the client side ? The important thing to note here is all that all the validation is happening on the client side. And since there are frameworks like Mobile Substrate that allow us to patch any method during runtime and modify its implementation, it is possible to disable the certificate validation that is happening in the application.</p>




<p>A POC tool for this by released in Blackhat and it was named iOS SSL Kill Switch. The full presentation can be found <a href="https://media.blackhat.com/bh-us-12/Turbo/Diquet/BH_US_12_Diqut_Osborne_Mobile_Certificate_Pinning_Slides.pdf">here</a>. After some time, the author realized that he was able to inspect traffic from apps that used certificate pinning (for e.g Twitter), but he wasn't able to see the traffic going through the App Store app. He then realized he needed to patch even more low level methods and kill specific processes in order to inspect traffic going via the App store app. The full writeup for this could be found <a href="https://nabla-c0d3.github.io/blog/2013/08/20/intercepting-the-app-stores-traffic-on-iOS/">here</a> and it's quite interesting, so i suggest you give it a read. Also note that this tool will also be able to disable the default SSL certificate validation, so you don't need to install a certificate as trusted root as well, which is what we usually do for inspeting traffic over HTTPs.</p>




<p>To really check that the Twitter app uses certificate pinning, install the Twitter app and route the device traffic through Burp Proxy. Make sure you are inspect traffic via HTTP/HTTPS using the steps mentioned in <a href="http://highaltitudehacks.com/2013/08/20/iOS-application-security-part-11-analyzing-network-traffic-over-http-slash-https">Part 11</a> of this series. However, when you open the twitter app and navigate around, the traffic is not captured by Burpsuite.</>




<p>To inspect the traffic going via Twitter, ssh into your device and download the iOS SSL Kill Switch package from it's <a href="https://github.com/iSECPartners/iOS-ssl-kill-switch/releases">releases</a> link. Also, make sure to install the following packages via Cydia.</p>




<ul>
<li>dpkg</li>
<li>MobileSubstrate</li>
<li>PreferenceLoader</li>
</ul>




<p>Now install the deb package using the command <i>dpkg -i <packagename></i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/1.png" width="967" height="134" alt="1"></p>

<p>Now, respring the device using the command <i>killall -HUP SpringBoard</i>.</p>




<p>Once this is done, go to Settings app. There will be a new menu for SSK Kill Switch and a slider to Disable certificate validation. Make sure the slider is set to on.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/2.png" width="832" height="254" alt="2"></p>

<p>Now route the traffic in the device to pass through Burp Proxy. Open twitter app and now you can see all the data going through via the twitter app as well.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/3.png" width="1045" height="451" alt="3"></p>

<p>To verify that SSL Kill Switch is being injected into the application, go to Xcode -> Devices (I am using Xcode 6), look for your device in the left menu and click on the arrow pointing up in the lower left corner to see the device logs. You will see that SSL Kill Switch is being injected into the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios36/4.png" width="598" height="123" alt="4"></p>

<p>Another cool utility that does the same job is <a href="https://github.com/intrepidusgroup/trustme">trustme</a>. I recommend you check it out.</p>

]]></content>
  </entry>
  
</feed>
