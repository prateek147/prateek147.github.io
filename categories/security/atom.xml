<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Prateek Gianchandani]]></title>
  <link href="http://prateek147.github.io//categories/security/atom.xml" rel="self"/>
  <link href="http://prateek147.github.io/"/>
  <updated>2015-04-01T12:11:23+04:00</updated>
  <id>http://prateek147.github.io/</id>
  <author>
    <name><![CDATA[Prateek Gianchandani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 4]]></title>
    <link href="http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4"/>
    <updated>2015-03-29T12:08:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4</id>
    <content type="html"><![CDATA[<p>In this article, we will look at a very handy framework for analysis of android applications named Drozer. Drozer is a very useful tool as it eliminates the need for having seperate tools for performing different security checks in an android application. It has a list of modules that you can use to interact with the application using Android's Inter-Process communication. Additionally, you can also install exploits and use it to exploit an android device.</p>




<p>The main purpose of this article is to make sure you are familiar with drozer so we can use it in the future articles. </p>




<p>The first thing to do is to install the drozer community edition from <a href="https://www.mwrinfosecurity.com/products/drozer/">this</a> link. You need to install both the drozer installer and the Agent.apk file which is the application that needs to be deployed on the device/emulator and acts as a communicator between the system and the application to be audited. </p>




<p>Once drozer has been installed on your system, install the agent.apk on your device/emulator.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/1.png" width="600" height="90" alt="1"></p>

<p>You will first need to set up port forwarding so that your system can connect to a TCP socket opened by the Agent inside the emulator, or on the device. By default, drozer uses port 31415:</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/2.png" width="800" height="54" alt="2"></p>

<p>Also make sure to start the agent application and start the server.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/3.png" width="513" height="277" alt="3"></p>

<p>Now you can connect to the agent using the following command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/4.png" width="750" height="360" alt="4"></p>

<p>You can list all the different modules by using the list command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/5.png" width="900" height="220" alt="5"></p>

<p>Every module requires different options. If you want to see the different options for a particular module, use run followed by the module name followed by -h.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/6.png" width="900" height="420" alt="6"></p>

<p>For e.g, to see a list of all the packages installed, you can use the module app.package.list.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/7.png" width="500" height="220" alt="7"></p>

<p>Now, to find info about a particular packages, use the module app.package.info. It will give out a lot of info about the application, for e.g the path where the application files are stored, the permissions that the application uses etc.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/8.png" width="550" height="280" alt="8"></p>

<p>Another useful module is app.package.attacksurface. It tells you about the exported components as well as whether the application is debuggable or not. We will look at exploiting debuggable applications in later articles.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/9.png" width="500" height="120" alt="9"></p>

<p>Now, let's do the same thing we did in the last article, call an exported activity in the insecure bank application. For that, we will use the module app.activity.start.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/10.png" width="800" height="32" alt="10"></p>

<p>And you will see the same result.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/11.png" width="700" height="320" alt="11"></p>

<p>In some cases, the activity might have an intent filter. For e.g, below is a sample intent filter.</p>




<p>
    
<activity android:name="ShareActivity">
    <intent-filter>
        <action android:name="android.intent.action.SEND"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <data android:mimeType="text/plain"/>
    </intent-filter>
</activity>
</p>




<p>Drozer supports calling activities by specifying actions and extra paramters also.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/12.png" width="700" height="245" alt="12"></p>

<p>Here is an example of calling an activity with extra parameter</p>




<p><i>
run app.activity.start --component com.mwr.example.intenttest com.mwr.example.intenttest.IntentActivity --flags ACTIVITY_NEW_TASK --extra string URL "Some Text"
</i></p>




<p>In this article, we got comfortable with using Drozer. Drozer can do much more, and we will be discussing all those features as we discuss more vulnerabilities in InsecureBank in the next article.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 3]]></title>
    <link href="http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3"/>
    <updated>2015-03-28T12:04:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3</id>
    <content type="html"><![CDATA[<p>In this article, we will look at attacking components in Android applications, starting with activities. But first, it is essential to understand what Android application components are. Android application components are the essential building blocks of an Android application. The behaviour and interaction between these components is defined in the manifest.xml file in the application. Mainly there are 4 types of components and it is important to understand their purpose and function.</p>




<p>The description of the 4 components given below has been taken from <a href="http://www.tutorialspoint.com/android/android_application_components.htm">this</a> link.</p>




<table>
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Activities</td><td>They dictate the UI and handle the user interaction to the smartphone screen</td></tr>
<tr><td>Services</td><td>They handle background processing associated with an application.</td></tr>
<tr><td>Broadcast Receivers</td><td>They handle communication between Android OS and applications.</td></tr>
<tr><td>Content Providers</td><td>They handle data and database management issues.</td></tr>
</table>




<!-- more -->




<h4>Activities</h4>


<p>An activity represents a single screen with a user interface. For example, an email application might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. If an application has more than one activity, then one of them should be marked as the activity that is presented when the application is launched.</p>

<p>An activity is implemented as a subclass of Activity class as follows:</p>

<pre>public class MainActivity extends Activity {

}</pre>




<h4>Services</h4>


<p>A service is a component that runs in the background to perform long-running operations. For example, a service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity.</p>

<p>A service is implemented as a subclass of Service class as follows:</p>

<pre>public class MyService extends Service {

}</pre>


<h4>Broadcast Receivers</h4>


<p>Broadcast Receivers simply respond to broadcast messages from other applications or from the system. For example, applications can also initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver who will intercept this communication and will initiate appropriate action.</p>

<p>A broadcast receiver is implemented as a subclass of BroadcastReceiver class and each message is broadcasted as an Intent object.</p>

<pre>public class MyReceiver  extends  BroadcastReceiver {

}</pre>


<h4>Content Providers</h4>


<p>A content provider component supplies data from one application to others on request. Such requests are handled by the methods of the ContentResolver class. The data may be stored in the file system, the database or somewhere else entirely.

A content provider is implemented as a subclass of ContentProvider class and must implement a standard set of APIs that enable other applications to perform transactions.</p>




<pre>public class MyContentProvider extends  ContentProvider {

}</pre>




<h4>Additional Components</h4>


<p>There are additional components which will be used in the construction of above mentioned entities, their logic, and wiring between them. These components are:</p>

<table class="src">
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Fragments</td><td>Represents a behavior or a portion of user interface in an Activity.</td></tr>
<tr><td>Views</td><td>UI elements that are drawn onscreen including buttons, lists forms etc.</td></tr>
<tr><td>Layouts</td><td>View hierarchies that control screen format and appearance of the views.</td></tr>
<tr><td>Intents</td><td>Messages wiring components together.</td></tr>
<tr><td>Resources</td><td>External elements, such as strings, constants and drawables pictures.</td></tr>
<tr><td>Manifest</td><td>Configuration file for the application.</td></tr>
</table>




<h4>One of the most important attributes of components is the exported property. Here is the documentation from android about it.</h4>




<h4>android:exported</h4>




<p>Whether or not the activity can be launched by components of other applications — "true" if it can be, and "false" if not. If "false", the activity can be launched only by components of the same application or applications with the same user ID.The default value depends on whether the activity contains intent filters. The absence of any filters means that the activity can be invoked only by specifying its exact class name. This implies that the activity is intended only for application-internal use (since others would not know the class name). So in this case, the default value is "false". On the other hand, the presence of at least one filter implies that the activity is intended for external use, so the default value is "true".This attribute is not the only way to limit an activity's exposure to other applications. You can also use a permission to limit the external entities that can invoke the activity (see the permission attribute).</p>




<p>Hence, if an activity is exported, it can be called by external applications. In order to test the vulnerable activity exercise in InsecureBank application, let's first start the application on Genymotion emulator and start the backend server as well.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/1.png" width="504" height="58" alt="1"></p>

<p>Once we start the app, we are presented with this login page. If the activity after a successful login is exported, then we can call that activity directly.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/2.png" width="1027" height="559" alt="2"></p>

<p>Let's have a look at the manifest file of the application to see if we can find the relevant activity. To look at the manifest file, first decompress the application using apktool as shown in the image below. This will create an application folder and the manifest file will be located inside it.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/4.png" width="735" height="275" alt="4"></p>

<p>Here is how the manifest file looks like. As you can see, there is an activity named <i>.PostLogin</i> which is set as exported.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/3.png" width="888" height="626" alt="3"></p>

<p>We can call this activity directly using the activity manager tool in the emulator. Let's have a look at the usage first.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/5.png" width="620" height="554" alt="5"></p>

<p>To start an activity with the am tool, here is the command.</p>




<pre>
adb shell
am start -n com.package.name/com.package.name.ActivityName
</pre>




<p>In this case, the package name is com.android.insecurebankv2 as can be seen from the manifest file.</p>




<p>So let's call the PostLogin activity by using the command shown below.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/6.png" width="894" height="97" alt="6"></p>

<p>In the application, you can see that you have successfully bypassed the login page.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/7.png" width="1025" height="325" alt="7"></p>

<p>You can also call activity or other components using drozer. We will look at drozer in the next article.</p>




<p>There are a couple of ways to prevent from these kinds of vulnerabilities. First of all, the android:exported property should always be set to FALSE unless really necessary. Secondly, if the application needs to be called from some specific external applications, you can add custom permissions to the activity and only allow applications that requests that permission to call the activity.</p>




<p>Before we move on to the next article, make sure you have a proper understanding of the <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">Android manifest</a> file and the different components in an andorid application.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 2]]></title>
    <link href="http://prateek147.github.io/2015/03/27/android-application-hacking-with-insecure-bank-part-2"/>
    <updated>2015-03-27T12:04:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/27/android-application-hacking-with-insecure-bank-part-2</id>
    <content type="html"><![CDATA[<p>In the previous article, we looked at setting up a mobile pentesting platform for Android applications. By now, you must have set up an emulator using genymotion and installed all the android command line tools along with some other additonal tools (drozer, dex2jar, apktool). In this article, we will look at some information gathering techniques. We will see how we can decompile an application to its java source, analyze the signature of the application and many more things.</p>




<!-- more -->




<p>At this point, i would also like to mention that if you are looking for a VM that contains all the tools to cater to your android application pentesting needs, have a look at <a href="https://androidtamer.com/">Android Tamer</a>.</p>




<p>First of all, make sure you have the latest version of InsecureBankv2 on your system. You can do a <i>git pull</i> to merge all the latest changes to your master branch.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/1.png" width="649" height="422" alt="1"></p>

<p>Once this is done, let's do some analysis on the apk file. Copy the apk file into a seperate folder for some analysis. Just like an iOS ipa file, an apk file is a compressed file, so you can decompress it by just changing the extension from apk to zip and then extracting it.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/2.png" width="873" height="378" alt="2"></p>

<p>Now browse over to the extracted folder and have a look. You can see a lot of files here.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/3.png" width="592" height="130" alt="3"></p>

<p>Let's describe them one by one.</p>




<ul>
    <li>AndroidManifest.xml - This is probably by far the most important source of information. From a security point of view, it contains information about the various components used in an application and lists the conditions in which they can be launched. It also displays information about the permissiosns that the application uses. I would highly recommend you to go through Google's <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">documentation</a> on the manifest file. We will discuss each component of an android application as we discuss vulnerabilities in them.</li>
    
    <li>assets - This is used to store raw assets file. The files stored here as compiled as is into the apk file.</li>
    
    <li>res - Used to store resources such as images, layout files, and string values.</li>
    
    <li>META-INF - Contains important information about the signature and the person who signed the application.</li>
    
    <li>classes.dex - This is where the compiled application code lies. To decompile an application, you need to convert the dex file to a jar file which can then be read by a java decompiler</li>
    
    
</ul>




<p>The information about the public key certificate is stored in the CERT.RSA file in the META-INF folder. To find out information about the public key certificate, use the command <i> keytool –printcert –file META-INF/CERT.RSA </i></p>


<p><img src="http://prateek147.github.io/images/posts/ib2/z.png" width="730" height="426" alt="Z"></p>

<p>Please note that it is also possible to modify the code of an apk file after decompiling and then recompile it to deploy to a device. However, once the application code is modified, it loses its integrity and hence needs to be resigned with a new public/private key pair. I would recommend that you have a look at <a href="http://developer.android.com/tools/publishing/app-signing.html">this</a> article that explains how to create your own public/private key pair. We will look at modifying application logic and then recompiling it in later articles in this series.</p>




<p>Once an application has been recompiled, you can verify its integrity using the jarsigner application.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/j.png" width="760" height="64" alt="J"></p>

<p>Now let's decompile the application using dex2jar. dex2jar can also take input as an apk file (rather than .dex file) and converts it into a jar file.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/x.png" width="654" height="87" alt="X"></p>

<p>Once this is done, you can simple open this file in JD-GUI and have a look at the source code.</p>


<p><img src="http://prateek147.github.io/images/posts/ib2/y.png" width="1026" height="621" alt="Y"></p>

<p>We can now scan through the source code to find potential vulnerabilities in the application. We can clearly note how easy it is to reverse engineer an apk file and look at the source code. It is important to note here that we are able to see the source code and understand it mainly because there is no code obfuscation applied in the application. Google provides tools like Proguard to help in obfuscating code. While this is not foolproof, there is also a commercial version of Proguard knows an DexGuard that works even better in applying code obfuscation. We will look at obfuscating application code in later articles.</p>




<p>In this article, we looked at how we can extract information from an apk file. In the next article, we will start looking at the different types of vulnerabilities demonstrated in InsecurBankv2.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 39 – Sensitive information in memory]]></title>
    <link href="http://prateek147.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory"/>
    <updated>2015-03-24T12:04:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/24/ios-application-security-part-39-sensitive-information-in-memory</id>
    <content type="html"><![CDATA[<p>In this article, we will look at analyzing the memory contents of an iOS application. iOS applications may store sensitive information like passwords, session IDs etc in the memory of the application without releasing them. In some cases, releasing these variables may not be an option. For e.g, it might be required for the application to send an authentication token with every request and hence there has to be a reference to it in the memory somewhere. Even though these variables might be encrypted when stored locally in the application, these variables will be in their unencryped format while the application is running. Hence, analyzing the contents of the memory is an important thing while pentesting an iOS application. If there are some important properties or instance variables that are not required, they should be released from the memory.</p>




<!-- more -->




<p>Basically, the memory of the application will contain a lot of information, most of which we will not be interested in. These things might include instantiated UIViews and other UI elements. We will definitely be interested in instantiated view controllers and their properties though. It is important to understand and focus on only the relevant information in the memory. For a penetration tester, you should mainly be interested in all the values of the properties and instance variable in an application.</p>




<p>We will be solving the Sensitive information in memory challenge in <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS application</a></p>


<p>.</p>

<p><img src="http://prateek147.github.io/images/posts/ios39/1.PNG" width="320" height="568" alt="1"></p>

<p>If we look at the challenges, the first challenge is to find properties named username and password. To do that, first we have to get the reference to the current view controller. From the class-dump output of the application, it is easy to figure out that the class name of this view controller is <i>SensitiveInformationDetailsVC</i>. We can find the reference to this class objects using the choose function in cycript. The choose function takes an Objective-C class as an argument, and attempts to scavenge the heap looking for regions of memory that are the right size and shape as the class (or any subclasses of that class) you have specified. So basically, it will find references to all objects of the classes and subclasses that you have provided.</p>


<p></p>

<p>Hence, to find the instances of the class <i>SensitiveInformationDetailsVC</i>, let's use the choose function with the class name as the argument.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/2.png" width="469" height="81" alt="2"></p>

<p>As we can see, there is only one reference, and can be accessed using the index 0.</p>




<p>To find out all properties, use the command a[0]->isa.messages.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/3.png" width="1140" height="344" alt="3"></p>

<p>Now, you can scan the output for all property names that you find interesting. Since we already know the property names in the challenge, which is username and password, we can directly access them using the commands shown below.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/4.png" width="264" height="99" alt="4"></p>

<p>That's it. Pretty simple isn't it.</p>




<p>Next, we need to find some instance variable. For this, we need to define a function that will print all the instance variables for a particular instance.</p>




<p>function tryPrintIvars(a){ var x={}; for(i in *a){ try{ x[i] = (*a)[i]; } catch(e){} } return x; }</p>




<p>Now, lets give the input as the instance of the class <i>SensitiveInformationDetailsVC</i> and we can see that it printed out all the instance variables along with their values.</p>


<p><img src="http://prateek147.github.io/images/posts/ios39/5.png" width="1150" height="514" alt="5"></p>

<p>However, we cannot find an instance variable named passwd. What's going on ? Well, here's the thing. The thing with instance variables is that they can be initialized within a particular method. If the function hasn't been called, the instance variable wouldn't be initialized. Also, because of a feature knows an ARC (Automatic reference counting) in iOS, the variables will automatically be released once the function has stopped executing. In some cases, you might not be able to call a function via manual browsing of the application, and that's where cycript becomes useful. Going back to the methods of this class, we see that there is a method named <i>initializeLogin</i>. And since it is the only other method apart from the regular iOS methods like viewDidLoad and didReceiveMemoryWarning, it is safe to assume that the instance variable is created in this method.</p>


<p></p>

<p>Once we call the function initializeLogin, the instance variable will instantiate and be stored in the memory of the application. The trick here is to use GDB to analye the application contents during the runtime and find the value of the variable before the function stops executing.. I will leave this as an exercise for you. And just for the sake of convenience, here is the source code of the initializeLogin method.</p>




<pre>
-(void)initializeLogin {
    //DO random stuff
    NSString *passwd = @"MYw0r1d1821";
    //Finish doing random stuff
}</pre>


<p></p></p>

<p>Mark Beard has written a nice article on dumping application memory from the heap and also released a tool to do so. I would recommend that you check the <a href="https://blog.netspi.com/ios-tutorial-dumping-the-application-heap-from-memory/">article</a> out as well. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 38 - Attacking apps using Parse (Guest Lecture by Egor Tolstoy)]]></title>
    <link href="http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse"/>
    <updated>2015-01-24T23:39:00+04:00</updated>
    <id>http://prateek147.github.io/2015/01/24/ios-application-security-part-38-attacking-apps-using-parse</id>
    <content type="html"><![CDATA[<p><b>This is a guest lecture by <a href="http://etolstoy.ru">Egor Tolstoy</a>. Egor is a full-time iOS developer working at Rambler&amp;Co and living with his lovely wife in Moscow, Russia. In his spare time he investigate iOS applications for different vulnerabilities and blogs about my research.</b></p>

<div><a href="http://parse.com/">Parse</a> is a wonderful BaaS which helps with setting up backend infrastructure for your mobile application as fast as possible. Maybe just because of this simplicity many developers forget about a number of new security issues and vulnerabilities.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/8822BC1A-FA0D-4BFF-8DC0-8CC103DFB92D.png" height="495" width="816"/><br/></div>


<div><br/></div>


<div>For those who don’t know what this service is, let’s make a brief introduction. Parse provides a lot of useful capabilities to mobile developer: cloud data storage, push notifications, usage statistics and crash logs gathering, code hosting, background jobs and a many other things. Within the boundaries of thes research we are interested in the cloud data storage, named <i>Cloud Core</i>.</div>


<div>All the data in Cloud Core is stored in so called custom classes (ordinary database tables).</div>


<div><br/></div>




<!-- more -->


<div><img src="http://prateek147.github.io/images/posts/ios38/8879CA5B-B494-43CD-A136-1DB8059F5AC1.png" height="420" width="1043"/><br/></div>


<div><br/></div>


<div>You can set a number of different client permissions for each of these classes: <i>GET, FIND, UPDATE, CREATE, DELETE</i> and <i>ADD FIELDS</i>. All of them are <i>Public</i> by default. Of course, most of the developers forget about the need of setting client access permissions once they configure their tables.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FDF17B0E-CD2B-47AB-BB46-F0D0BE9BDE7E.png" height="535" width="403"/><br/></div>


<div><br/></div>


<div>I’ve closely faced Parse during one of my work projects and spent a lot of time configuring ACLs properly - so I became interested in how other developers maintain their Parse accounts. I’ve found the object for my little research right on <a href="https://parse.com/customers">parse.com/customers</a>. It was <a href="http://cubefreeapp.com/">Cubefree</a> - a service for locating cowering spaces.</div>


<div><br/></div>


<div>A pair of keys is used for connecting to Parse account from a mobile application: <i>Application ID</i> and <i>Client Key</i>. We’ve got to find out these strings in order to manipulate the data in Cloud Core. Let’s decrypt the application binary with the help of <a href="https://github.com/dmayer/idb">idb</a> - an awesome iOS pentesting utility. While the decryption process is going on, we can check <i>NSUserDefaults</i> - a rather common place for storing such kind of data (only for reckless developers, of course).</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/03B3C111-1C51-4330-899E-7E5873D94B7F.png" height="486" width="879"/><br/></div>


<div><br/></div>


<div>As you can see, nothing criminal was found - no signs of confidential data. Let’s get back to our decrypted application binary and feed it to <a href="http://www.hopperapp.com/">Hopper</a> - a well known disassembler, specialized in reverse-engineering Objective-C applications. Our quest for Parse keys will begin in <span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>application:didFinishLaunchingWithOptions method</i> of <i>App Delegate.</i> One of the noteworthy Hopper features is the ability to represent any procedure in pseudocode form, which flattens the reversed code understanding curve.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/AB772C3F-377A-4B02-BA39-946D0B54831C.png" height="602" width="667"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">As expected, the connection to Parse is initiated right here. Now we’ll analyse the structure of Parse data and its client permissions.</font></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">The next step is identification of Parse tables names. Actually, we can see them on the same screenshot as client keys - there is a plenty of <i>registerSubclass</i> method calls. These classes are children of the root <i>PFObject</i> class. Each of them has a method </font><span style="color: rgb(34, 34, 34); font-family: 'Helvetica Neue', Helvetica, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><i>parseClassName, </i>which returns a corresponding Parse table name.</span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/FC415E09-109A-460B-9E04-763532556FDB.png" height="87" width="582"/><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><font color="#222222">Let’s inspect the structure of these tables:</font></div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-1</a><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div><span style="color: rgb(34, 34, 34);"><br/></span></div>


<div>The knowledge of classes organization, however, is not enough. We should try to inspect access permissions for all the Parse classes to determine how we can influence the application behaviour. It’s quite simple - all we have to do is to make a couple of queries to Parse and analyse their results. I’ve wrote a small utility - <a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a>, which simplifies these routine actions and automatically determines the access permissions for all known classes.</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/E171D146-358B-41FD-98E2-FBC293EBAFEF.png" height="694" width="592"/><br/></div>


<div><br/></div>


<div>We can create a table using all the derived data:</div>


<div><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82%202015-01-24%2020.41.30.png" height="761" width="738"/><br/></div>


<div><br/></div>


<div><br/></div>


<div>As we can see from the list of permissions, the developers tried to implement a security policy, but it wasn’t enough. Let’s show what we can achieve by manipulating the <i>ChatMessage</i> class.</div>


<div><br/></div>


<div>The most obvious vulnerability is that the attacker is able to modify the text of any message in any chatroom. After the execution of this code block the reasonable statement turns into a nonsense:</div>


<div><a href="https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2">https://gist.github.com/igrekde/cb8e2c12408715c9f739#file-parse-security-2</a><br/></div>


<div><img src="http://prateek147.github.io/images/posts/ios38/cubefree-screen.png" height="1138" width="1284"/><br/></div>


<div><br/></div>


<div>We can also post new messages to any chat by providing a new <i>PFObject</i> with a correct chatId. But we are noble pentesters, so let’s pay attention to the fact that we aren’t able to delete any message due to developers paranoia :).</div>


<div><br/></div>


<div>A much more serious vulnerability consists in incorrect data mapping algorithm. When a <i>ChatMessage</i> object doesn’t have anything in the sender field, the Cubefree application crashes. So, it’s possible to loop through all the chatrooms, post an invalid <i>ChatMessage</i> - and the application will always crash when somebody opens the chat screen. It’s fraught with bad App Store ratings, users outflow and a complete project failure.</div>


<div>There are same vulnerabilities in other classes - but they are not within the scope of current investigation.</div>


<div><br/></div>


<div>As for security of your own applications - everything is quite transparent, just follow these simple rules:</div>


<ul>
<li>Always configure client permissions for all of your Parse classes.</li>
<li>Make use of user-based ACLs - it’s a great Parse feature.</li>
<li>If a client should be able to modify only one property of your class, think of encapsulating this field in the separate class. By doing it you will circumvent the possibility of illegal changes in your objects.</li>
<li>Don’t rely on Parse - always do a proper validity check of the data it returns you.</li>
<li>Remember that, theoretically, applicationID and clientKey can be found by any attacker, so you should build your application security grounding on this knowledge.</li>
<li>The previous advice doesn’t cancel the necessarily of obfuscating strings in code :)</li>
<li>Use Cloud Code in more complex situations.</li>
</ul>


<div><br/></div>


<div>If you recognise some of your applications in this research, don’t blame Parse - it’s the amazing service, which minimize backend developing costs. All of the examined vulnerabilities lie heavy on the developers conscience.</div>


<div><br/></div>


<div>Further reading:</div>


<ul>
<li><a href="https://www.parse.com/docs">Parse Documentation</a></li>
<li><a href="http://blog.parse.com/2014/06/30/parse-security-i-are-you-the-key-master">A small series of articles about Parse security</a></li>
<li><a href="https://github.com/igrekde/ParseRevealer">Parse Revealer</a></li>
<li><a href="http://highaltitudehacks.com/2014/01/17/ios-application-security-part-28-patching-ios-application-with-hopper/">iOS Application Security Part 28 - Patching iOS Application With Hopper</a><br/></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2012-01-06-the-hopper-disassembler.html">The Hopper Disassembler by Mike Ash</a></li>
</ul>


<div> </div>


<p></body></html></p>
]]></content>
  </entry>
  
</feed>
