<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Prateek Gianchandani]]></title>
  <link href="http://prateek147.github.io//categories/security/atom.xml" rel="self"/>
  <link href="http://prateek147.github.io/"/>
  <updated>2015-04-28T01:32:17+04:00</updated>
  <id>http://prateek147.github.io/</id>
  <author>
    <name><![CDATA[Prateek Gianchandani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 41 - Debugging applications using LLDB]]></title>
    <link href="http://prateek147.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb"/>
    <updated>2015-04-28T01:26:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/28/ios-application-security-part-41-debugging-applications-using-lldb</id>
    <content type="html"><![CDATA[<p>In this article we will learn about the LLDB debugger used by Apple's Xcode for debugging applications, understand why it is better for security testing, and then learn how to use it to debug iOS applications.</p>




<p>The following excerpt is from Apple's documentation.</p>




<p>LLDB is Apple's <i>from the ground up</i> replacement for GDB, developed in close coordination with the LLVM compilers to bring you state-of-the-art debugging with extensive capabilities in flow control and data inspection. Starting with Xcode 5, all new and preexisting development projects are automatically reconfigured to use LLDB. The standard LLDB installation provides you with an extensive set of commands designed to be compatible with familiar GDB commands. In addition to using the standard configuration, you can easily customize LLDB to suit your needs</p>




<p>A good way to start leaning about the LLDB debugger is to watch this video from WWDC 2014.</p>




<iframe width="420" height="315" src="https://www.youtube.com/embed/IPhgcbuDk_k" frameborder="0" allowfullscreen></iframe>




<p>But the question that remains is, why is LLDB better than GDB ?</p>




<p>To sum it up, there are a few reasons for that.</p>




<ul>
    <li>It works well for iOS 8</li>
    <li>LLDB is much faster, has support for multithread programming, and is scriptable.</li>
    <li>LLDB understands the dot syntax. You can use something like <i>po self.propertyName</i> or even <i>po instanceVariable</i> to find any value of a property or instance variable while debugging applications.</li>
    <li>It has plug-in support for functionality and extensions.</li>
</ul>




<!-- more -->




<p>To debug applications on an iOS device, we will use the command line utility debugserver which is used by Apple's Xcode to debug applications on the device. Usually, it gets installed on the device automatically when a device is marked for development, which requires a valid provisioning profile, but it can only debug applications that were signed by that particular provisioning profile. This is because of lack of entitlement to allow task_for_pid(). Hence, in order to debug any application, we must create a new entitlement file with the mentioned flag set to true, sign the debug server application with that entitlement file, and then deploy the console app to the device. Please note that the current location of debugserver application on the Mac is a read-only ramdisk, hence the application must be copied to a different location before signing with the new entitlement file.</p>




<p>Hence, the first step to do is to mount Xcode's developer disk image on your Mac and copy the debugserver binary to a seperate location where you can resign it. Use the following command.</p>




<p><i>hdiutil attach /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/[ios version]\ \(12B411\)/DeveloperDiskImage.dmg</i></p>


<p><img src="http://prateek147.github.io/images/posts/ios41/1.png" width="648" height="343" alt="1"></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/2.png" width="767" height="225" alt="2"></p>

<p>Once this is done, create a new file with the name entitlements.plist and enter the following data in it.</p>




<pre>
&lt?xml version="1.0" encoding="UTF-8"?&gt
&lt!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/ PropertyList-1.0.dtd"&gt
<plist version="1.0">
<dict>
    &ltkey&gtcom.apple.springboard.debugapplications</key>
    &lttrue/&gt
    &ltkey&gtrun-unsigned-code</key>
    &lttrue/&gt
    &ltkey&gtget-task-allow</key>
    &lttrue/&gt
    &ltkey&gttask_for_pid-allow</key>
    &lttrue/&gt
</dict> 
</plist>
</pre>




<p>Now, you have to resign the debugserver binary with the new entitlements file.</p>


<p><i>codesign -s &ndash; &mdash;entitlements entitlements.plist -f debugserver</i></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/3.png" width="806" height="42" alt="3"></p>

<p>Once this is done, deploy the binary to the device. To start debugserver on the device, use the command shown below, and also specify the name of the application you want to hook to, which in this case is Twitter.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/4.png" width="624" height="163" alt="4"></p>

<p>Now on your computer, start lldb to enter the lldb interpreter. Now use the following commands as shown below to to connect to the device. Make sure to replace the IP address here with the IP address of your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/5.png" width="590" height="409" alt="5"></p>

<p>Once this is done, you will see that you are successfully able to debug the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/6.png" width="715" height="380" alt="6"></p>

<p>Now you can use the po command to print out specific objects instantiated in the application.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/7.png" width="451" height="84" alt="7"></p>

<p><img src="http://prateek147.github.io/images/posts/ios41/8.png" width="587" height="95" alt="8"></p>

<p>The syntax for LLDB is a bit different. For e.g, here is the syntax for printing all the register variables.</p>


<p><img src="http://prateek147.github.io/images/posts/ios41/9.png" width="705" height="500" alt="9"></p>

<p>That's it for this article. In this article, we learnt how to deploy LLDB to the device and use it to run some basic commands. In the next article, we will look at some advanced usage of LLDB and how it can be used to find  sensitive information in memory.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 40 - Testing apps on your Mac]]></title>
    <link href="http://prateek147.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac"/>
    <updated>2015-04-28T01:25:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/28/ios-application-security-part-40-testing-apps-on-your-mac</id>
    <content type="html"><![CDATA[<p>In this article, we will discuss the extent to which you can test applications on your Mac rather than the. This could be useful for many reasons, sometimes you may not have a jailbroken but want to get a POC for a vulnerability. We will discuss what are the things you can and cannot do. To test the application on your system, you will need to have Xcode installed on your system and you will run the applications on the iOS simulator.</p>




<h3>Installing ipa files from iTunes on your simulator</h3>




<p>Sadly, there is no way you can do that. This is because the iTunes applications are compiled for the ARM platform whereas the applications that run on your simulator are compiled for the x86/x64 platform. So, to test any application properly on your Mac, you must have the source code of the application to run it on the simulator.</p>




<p>In this case, we are going to perform our testing on <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app</a></p>




<!-- more -->




<h3>Analyzing local data storage</h3>




<p>One of the most important things to check during performing penetration testing of iOS applications is checking for insecure local data storage vulnerabilites. You can easily check this by looking at the application folder created on your Mac by Xcode.This folder is available at the following locations.</p>




<p>iOS 8 - /Users/[username]/Library/Developer/CoreSimulator/Devices/[a unique number]/data/Containers/Data/Application/[another unique number]/ </p>


<p>iOS 7 - /Users/[username]/Library/Application Support/iPhone Simulator/[ios version]/Applications/[a unique id]/</p>




<p>Make sure to check this folder and see if the application is not storing any sensitive data to this folder.</p>




<h3>Checking logs</h3>




<p>You can easily check the logs that the applications is logging by looking at the logs section in Xcode. For example, over here, we can see that the application is logging sensitive data to the. However, if you see this behaviour, don't immediately report it as a vulnerability. Some developers add a check to detect whether the application is running on a simulator or a, and only log information if it is running on a simulator. If there is no such check, then this is definitely a vulnerability.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/2.png" width="882" height="602" alt="2"></p>

<h3>Attaching debuggers and Tracing method calls</h3>




<p>You can attach a debugger to the running application in the simulator. Its better to use LLDB debugger since it comes installed with Xcode command line tools. The iOS application running on the simulator can also be seen as a running process on your computer by using the command <i>ps aux</i>. You can attach to the running application both by using the pid or the name.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/lldb.png" width="511" height="249" alt="Lldb"></p>

<p>You can easily trace the method calls by using the inbuilt debugger LLDB in Xcode. To do that, you need to add a symbolic breakpoint in Xcode. See the plus arrow in the bottom left and click on it to add a symbolic breakpoint.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/3.png" width="759" height="441" alt="3"></p>

<p>Now set a breakpoint for the <i>objc_msgSend</i> call. Click on Add action and add the debugger command as <i>p (void)printf("[%s, %s]\n", (char*)object_getClassName($arg1), $arg2)</i> and make sure you check the option to continue execution of the program. You will notice that you are now able to trace all the method calls.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/4.png" width="885" height="802" alt="4"></p>

<h3>Attaching cycript</h3>




<p>You can even attach Cycript to the running application process in the simulator and demonstrate POC for vulnerabilities. Cycript works for Mac as well and you use the exact syntax that you use while auditing application on your.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/cycript.png" width="536" height="104" alt="Cycript"></p>

<h3>Monitoring Network traffic</h3>




<p>You can pretty much see all the network traffic over HTTP/HTTPs without any issues. You can either use Burpsuite or Charles for it. For HTTPs traffic, you will have to install the SSL certificate on your simulator. To do this, simply drag and drop the certificate file to your simulator, and click on install to install the certificate.</p>


<p><img src="http://prateek147.github.io/images/posts/ios40/cert.png" width="375" height="484" alt="Cert"></p>

<p>That's it for this article. In the next article, we will look at using the LLDB debugger for debugging iOS applications.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Damn Vulnerable iOS App solutions free for download]]></title>
    <link href="http://prateek147.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download"/>
    <updated>2015-04-03T16:26:00+04:00</updated>
    <id>http://prateek147.github.io/2015/04/03/damn-vulnerable-ios-app-solutions-free-for-download</id>
    <content type="html"><![CDATA[<p>I have decided to give away the solutions for DVIA for free. The reason for this has been too many people coming up with queries for the solutions and i believed giving away the solutions for free would really benefit the infosec community.
It has taken me a lot of nights and hard work to create this project and specially the solutions.
If you think this project has been useful to you and your organization, please consider making a donation to this project.
You can donate to this project and download the solutions for free from <a href="http://damnvulnerableiosapp.com/#solutions">here</a>.</p>

<p>-Prateek</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 4]]></title>
    <link href="http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4"/>
    <updated>2015-03-29T12:08:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/29/android-application-hacking-with-insecure-bank-part-4</id>
    <content type="html"><![CDATA[<p>In this article, we will look at a very handy framework for analysis of android applications named Drozer. Drozer is a very useful tool as it eliminates the need for having seperate tools for performing different security checks in an android application. It has a list of modules that you can use to interact with the application using Android's Inter-Process communication. Additionally, you can also install exploits and use it to exploit an android device.</p>




<p>The main purpose of this article is to make sure you are familiar with drozer so we can use it in the future articles. </p>




<p>The first thing to do is to install the drozer community edition from <a href="https://www.mwrinfosecurity.com/products/drozer/">this</a> link. You need to install both the drozer installer and the Agent.apk file which is the application that needs to be deployed on the device/emulator and acts as a communicator between the system and the application to be audited. </p>




<p>Once drozer has been installed on your system, install the agent.apk on your device/emulator.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/1.png" width="600" height="90" alt="1"></p>

<!-- more -->




<p>You will first need to set up port forwarding so that your system can connect to a TCP socket opened by the Agent inside the emulator, or on the device. By default, drozer uses port 31415:</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/2.png" width="800" height="54" alt="2"></p>

<p>Also make sure to start the agent application and start the server.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/3.png" width="513" height="277" alt="3"></p>

<p>Now you can connect to the agent using the following command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/4.png" width="750" height="360" alt="4"></p>

<p>You can list all the different modules by using the list command.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/5.png" width="900" height="220" alt="5"></p>

<p>Every module requires different options. If you want to see the different options for a particular module, use run followed by the module name followed by -h.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/6.png" width="900" height="420" alt="6"></p>

<p>For e.g, to see a list of all the packages installed, you can use the module app.package.list.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/7.png" width="500" height="220" alt="7"></p>

<p>Now, to find info about a particular packages, use the module app.package.info. It will give out a lot of info about the application, for e.g the path where the application files are stored, the permissions that the application uses etc.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/8.png" width="550" height="280" alt="8"></p>

<p>Another useful module is app.package.attacksurface. It tells you about the exported components as well as whether the application is debuggable or not. We will look at exploiting debuggable applications in later articles.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/9.png" width="500" height="120" alt="9"></p>

<p>Now, let's do the same thing we did in the last article, call an exported activity in the insecure bank application. For that, we will use the module app.activity.start.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/10.png" width="800" height="32" alt="10"></p>

<p>And you will see the same result.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/11.png" width="700" height="320" alt="11"></p>

<p>In some cases, the activity might have an intent filter. For e.g, below is a sample intent filter.</p>




<p>
    
<activity android:name="ShareActivity">
    <intent-filter>
        <action android:name="android.intent.action.SEND"/>
        <category android:name="android.intent.category.DEFAULT"/>
        <data android:mimeType="text/plain"/>
    </intent-filter>
</activity>
</p>




<p>Drozer supports calling activities by specifying actions and extra paramters also.</p>


<p><img src="http://prateek147.github.io/images/posts/ib4/12.png" width="700" height="245" alt="12"></p>

<p>Here is an example of calling an activity with extra parameter</p>




<p><i>
run app.activity.start --component com.mwr.example.intenttest com.mwr.example.intenttest.IntentActivity --flags ACTIVITY_NEW_TASK --extra string URL "Some Text"
</i></p>




<p>In this article, we got comfortable with using Drozer. Drozer can do much more, and we will be discussing all those features as we discuss more vulnerabilities in InsecureBank in the next article.</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Application hacking with Insecure Bank Part 3]]></title>
    <link href="http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3"/>
    <updated>2015-03-28T12:04:00+04:00</updated>
    <id>http://prateek147.github.io/2015/03/28/android-application-hacking-with-insecure-bank-part-3</id>
    <content type="html"><![CDATA[<p>In this article, we will look at attacking components in Android applications, starting with activities. But first, it is essential to understand what Android application components are. Android application components are the essential building blocks of an Android application. The behaviour and interaction between these components is defined in the manifest.xml file in the application. Mainly there are 4 types of components and it is important to understand their purpose and function.</p>




<p>The description of the 4 components given below has been taken from <a href="http://www.tutorialspoint.com/android/android_application_components.htm">this</a> link.</p>




<table>
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Activities</td><td>They dictate the UI and handle the user interaction to the smartphone screen</td></tr>
<tr><td>Services</td><td>They handle background processing associated with an application.</td></tr>
<tr><td>Broadcast Receivers</td><td>They handle communication between Android OS and applications.</td></tr>
<tr><td>Content Providers</td><td>They handle data and database management issues.</td></tr>
</table>




<!-- more -->




<h4>Activities</h4>


<p>An activity represents a single screen with a user interface. For example, an email application might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. If an application has more than one activity, then one of them should be marked as the activity that is presented when the application is launched.</p>

<p>An activity is implemented as a subclass of Activity class as follows:</p>

<pre>public class MainActivity extends Activity {

}</pre>




<h4>Services</h4>


<p>A service is a component that runs in the background to perform long-running operations. For example, a service might play music in the background while the user is in a different application, or it might fetch data over the network without blocking user interaction with an activity.</p>

<p>A service is implemented as a subclass of Service class as follows:</p>

<pre>public class MyService extends Service {

}</pre>


<h4>Broadcast Receivers</h4>


<p>Broadcast Receivers simply respond to broadcast messages from other applications or from the system. For example, applications can also initiate broadcasts to let other applications know that some data has been downloaded to the device and is available for them to use, so this is broadcast receiver who will intercept this communication and will initiate appropriate action.</p>

<p>A broadcast receiver is implemented as a subclass of BroadcastReceiver class and each message is broadcasted as an Intent object.</p>

<pre>public class MyReceiver  extends  BroadcastReceiver {

}</pre>


<h4>Content Providers</h4>


<p>A content provider component supplies data from one application to others on request. Such requests are handled by the methods of the ContentResolver class. The data may be stored in the file system, the database or somewhere else entirely.

A content provider is implemented as a subclass of ContentProvider class and must implement a standard set of APIs that enable other applications to perform transactions.</p>




<pre>public class MyContentProvider extends  ContentProvider {

}</pre>




<h4>Additional Components</h4>


<p>There are additional components which will be used in the construction of above mentioned entities, their logic, and wiring between them. These components are:</p>

<table class="src">
<tr><th style="width:25%">Components</th><th>Description</th></tr>
<tr><td>Fragments</td><td>Represents a behavior or a portion of user interface in an Activity.</td></tr>
<tr><td>Views</td><td>UI elements that are drawn onscreen including buttons, lists forms etc.</td></tr>
<tr><td>Layouts</td><td>View hierarchies that control screen format and appearance of the views.</td></tr>
<tr><td>Intents</td><td>Messages wiring components together.</td></tr>
<tr><td>Resources</td><td>External elements, such as strings, constants and drawables pictures.</td></tr>
<tr><td>Manifest</td><td>Configuration file for the application.</td></tr>
</table>




<h4>One of the most important attributes of components is the exported property. Here is the documentation from android about it.</h4>




<h4>android:exported</h4>




<p>Whether or not the activity can be launched by components of other applications — "true" if it can be, and "false" if not. If "false", the activity can be launched only by components of the same application or applications with the same user ID.The default value depends on whether the activity contains intent filters. The absence of any filters means that the activity can be invoked only by specifying its exact class name. This implies that the activity is intended only for application-internal use (since others would not know the class name). So in this case, the default value is "false". On the other hand, the presence of at least one filter implies that the activity is intended for external use, so the default value is "true".This attribute is not the only way to limit an activity's exposure to other applications. You can also use a permission to limit the external entities that can invoke the activity (see the permission attribute).</p>




<p>Hence, if an activity is exported, it can be called by external applications. In order to test the vulnerable activity exercise in InsecureBank application, let's first start the application on Genymotion emulator and start the backend server as well.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/1.png" width="504" height="58" alt="1"></p>

<p>Once we start the app, we are presented with this login page. If the activity after a successful login is exported, then we can call that activity directly.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/2.png" width="1027" height="559" alt="2"></p>

<p>Let's have a look at the manifest file of the application to see if we can find the relevant activity. To look at the manifest file, first decompress the application using apktool as shown in the image below. This will create an application folder and the manifest file will be located inside it.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/4.png" width="735" height="275" alt="4"></p>

<p>Here is how the manifest file looks like. As you can see, there is an activity named <i>.PostLogin</i> which is set as exported.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/3.png" width="888" height="626" alt="3"></p>

<p>We can call this activity directly using the activity manager tool in the emulator. Let's have a look at the usage first.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/5.png" width="620" height="554" alt="5"></p>

<p>To start an activity with the am tool, here is the command.</p>




<pre>
adb shell
am start -n com.package.name/com.package.name.ActivityName
</pre>




<p>In this case, the package name is com.android.insecurebankv2 as can be seen from the manifest file.</p>




<p>So let's call the PostLogin activity by using the command shown below.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/6.png" width="894" height="97" alt="6"></p>

<p>In the application, you can see that you have successfully bypassed the login page.</p>


<p><img src="http://prateek147.github.io/images/posts/ib3/7.png" width="1025" height="325" alt="7"></p>

<p>You can also call activity or other components using drozer. We will look at drozer in the next article.</p>




<p>There are a couple of ways to prevent from these kinds of vulnerabilities. First of all, the android:exported property should always be set to FALSE unless really necessary. Secondly, if the application needs to be called from some specific external applications, you can add custom permissions to the activity and only allow applications that requests that permission to call the activity.</p>




<p>Before we move on to the next article, make sure you have a proper understanding of the <a href="http://developer.android.com/guide/topics/manifest/manifest-intro.html">Android manifest</a> file and the different components in an andorid application.</p>

]]></content>
  </entry>
  
</feed>
