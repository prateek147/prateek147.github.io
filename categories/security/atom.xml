<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Prateek Gianchandani]]></title>
  <link href="http://prateek147.github.io//categories/security/atom.xml" rel="self"/>
  <link href="http://prateek147.github.io/"/>
  <updated>2018-04-19T16:38:12+04:00</updated>
  <id>http://prateek147.github.io/</id>
  <author>
    <name><![CDATA[Prateek Gianchandani]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Releasing Damn Vulnerable iOS App v2.0 - written in Swift]]></title>
    <link href="http://prateek147.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition"/>
    <updated>2018-04-19T01:03:00+04:00</updated>
    <id>http://prateek147.github.io/2018/04/19/damn-vulnerable-ios-app-v2-swift-edition</id>
    <content type="html"><![CDATA[<p>I am glad to release a completely new version of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS App</a> written in Swift 4. With developers now migrating to Swift for developing apps, it is important to have a testbed app for iOS in Swift. Though I have added some sections in Objective-C too which the users can test to learn Objective-C related vulns.</p>

<p><img src="http://prateek147.github.io/images/posts/dvia2/dvia.png" width="310" height="552" alt="1"></p>

<p>The following vulnerabilities are covered in this version.</p>

<ol>
<li><b>Local Data Storage</b> - Data Storage in Plist, UserDefaults, Keychain, CoreData, Webkit Cache, Realm, Couchbase and YapDatabase.</li>
<li><b>Jailbreak Detection</b> - 5 challenges in this section. Apart from the usual checks where you can use runtime manipulation and attach debuggers to bypass Jailbreak detection, users will have to mitigate scenarios where there is added runtime protection, use of inline functions, string obfuscation, and certain edge cases, for e.g the exiting of an app when a jailbroken device is detected.</li>
<li><b>Excessive Permissions</b> - A demo on how app permissions can be misused, as demonstrated by Krause originally.</li>
<li><b>Runtime Manipulation</b> - Use runtime manipulation to modify instance variables, bypass local login checks, and brute force pin codes. In some cases, you might have to attach a debugger.</li>
<li><b>Anti Anti Hooking/Debugging</b> - Enabling these will detect when a debugger or a runtime analysis tool such as Cycript is attached to the app. There is also detection for MobileSubstrate, SSLKillSwitch2 etc. Try and work your way around it and see if you can still solve other challenges with these limitations. Reverse & Patch, Patch, Patch ! </li>
<li><b>Binary Protection</b> - Do some binary analysis to identify whether ARC, PIE, Stack smashing is enabled. Find the signature used to sign the binary and the entitlements it has. Also check if the app is stripped of its symbols or not.</li>
<li><b>Touch/Face ID Bypass</b> - Bypass Touch ID authentication when insecure APIs (LAContext) are being used.</li>
<li><b>Phishing</b> - Demonstration of alerts generated by app that look like the ones generated from App Store, which can potentially be used for conducting phishing attacks. Original idea by Krause.</li>
<li><b>Side Channel Data Leakage</b> - Understand the different kinds of Side Channel Data leakage such as Device Logs, Pasteboard, App Screenshot, Keystroke Logging, Insecure APIs used for HTTP Cookies etc.</li>
<li><b>IPC Issues</b> - Solve this challenge to understand what can happen when an app is receiving requests via URL schemes from untrusted sources and doesn't validate it properly.</li>
<li><b>Broken Cryptography</b> - Bypass 2 encryption and hashing implementations, one with AES  and the other one with PBKDF2 with only few rounds of hashing.</li>
<li><b>Webview Issues</b> - Understand injections in Webviews.</li>
<li><b>Network Layer Security</b> - Capture traffic over HTTP and HTTPs. Bypass Certificate and Public Key Pinning. Also understand what is ATS (App Transport Security) and check whether it is implemented or not.</li>
<li><b>Application Patching</b> - Patch login checks, jailbreak detection methods, and in specific certain specific instructions used in the app.</li>
<li><b>Sensitive Information in Memory</b> - Dump the information from the memory to look at the sensitive data.</li>
</ol>




<!-- more -->




<h2>Installing DVIA on any iOS device </h2>


<p>The best way to install DVIA on any device (jailbroken or not) is using <a href="http://www.cydiaimpactor.com/
">Cydia Impactor</a>. However, it would be ideal to have a jailbroken device for testing as most of the vulnerabilities can be exploited only with the use of a JB device.</p>

<h3>Steps</h3>




<ol>
<li>Create an Apple ID https://appleid.apple.com/account.</li>
<li>Download <em>Impactor</em>, make sure the device you want to install the app on is connected to your computer. Now drag and drop the <em>IPA</em> file to <em>Impactor</em>.</li>
<li>Enter your Apple ID credentials. App will install on the device.</li>
<li>Go to your device, <em>Settings -> General -> Device Management</em>. Select the Apple ID you used to install the app. Click on <em>Verify App</em> under DVIAv2.</li>
</ol>




<h2>Compiling DVIA using Xcode </h2>




<h3>Steps</h3>




<ol>
<li>Clone the DVIA repo , git clone https://github.com/prateek147/DVIA-v2</li>
<li>cd to the project root directory where the <em>Podfile</em> is present (/DVIA-v2/DVIA-v2). Then run <em>pod install</em></li>
<li>Open the <em>DVIA-v2.xcworkspace</em> file with Xcode. You can now directly run the app on a simulator.</li>
<li>For running on the device, go under Project settings in Xcode on the top left, head over to the <em>General</em> tab and under <em>Signing</em>, enter credentials for your Apple ID.</li>
<li>Now you can build and run the project on the device. You will have to trust the app again by going under Settings -> General -> Device Management. </li>
</ol>




<h2>Some Important Links</h2>




<ol>
<li>Application Website - <a href="http://damnvulnerableiosapp.com">Here</a></li>
<li>Github Page - <a href="https://github.com/prateek147/DVIA-v2">https://github.com/prateek147/DVIA-v2</a></li>
<li>Download Page - <a href="http://damnvulnerableiosapp.com#downloads">Here</a></li>
</ol>




<h2>Donate</h2>




<p>if you benefit from this project and want to make a contribution, please consider making a donation to The Juniper Fund (www.thejuniperfund.org/)</p>




<p>The Juniper fund is focusing on high altitude workers involved with climbing and expedition support in the high mountains of Nepal. When a high altitude worker has an accident (death or debilitating injury), the impact to the family is devastating. The juniper fund provides funds to the affected families with a 3-Tier model - Cost of Living grant, vocational training and small business grant. For more information,  visit <a href="http://www.thejuniperfund.org">www.thejuniperfund.org</a>.</p>




<p>Or watch the videos below.</p>




<iframe width="560" height="314" src="https://www.youtube.com/embed/HsV6jaA5J2I" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>




<iframe width="560" height="315" src="https://www.youtube.com/embed/6dHXcoF590E" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>


<p><strong>Solutions</strong></p>

<p>I am still working on the solutions and would post them in form of blog posts starting soon.</p>


<p>For any questions, shoot me an email at Prateek at damnvulnerableiosapp.com or DM me on <a href="https://twitter.com/prateekg147">Twitter</a>. For any bugs/functionalities, please raise them via the <a href="https://github.com/prateek147/DVIA-v2">Github</a> page.</p>




<p>Happy Hacking !</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 46 - App Transport Security]]></title>
    <link href="http://prateek147.github.io/2016/06/23/ios-application-security-part-46-app-transport-security"/>
    <updated>2016-06-23T01:03:00+04:00</updated>
    <id>http://prateek147.github.io/2016/06/23/ios-application-security-part-46-app-transport-security</id>
    <content type="html"><![CDATA[<p>One of the most common misconfiguration issues that i find during testing iOS apps is the bypass of the App Transport Security feature introduced by Apple in iOS 9. Here&rsquo;s an excerpt from Apple&rsquo;s documentation about ATS.</p>

<p><b><i>&ldquo;Starting in iOS 9.0 and OS X v10.11, a new security feature called App Transport Security (ATS) is available to apps and is enabled by default. It improves the privacy and data integrity of connections between an app and web services by enforcing additional security requirements for HTTP-based networking requests. Specifically, with ATS enabled, HTTP connections must use HTTPS (RFC 2818). Attempts to connect using insecure HTTP fail. Furthermore, HTTPS requests must use best practices for secure communications.&rdquo;</i></b></p>

<!-- more -->


<p>It is important to note that just using HTTPs is not enough. The following screenshot taken from Apple&rsquo;s <a href="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33">documentation</a> discusses the necessary conditions necessary for ATS.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/1.png" width="2186" height="1114" alt="1"></p>

<p>Since updating to iOS 9, developers start getting errors like if the app is not communicating over a secure connection.</p>

<p><b><i>Connection failed: Error Domain=NSURLErrorDomain Code=-1022 &ldquo;The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.&rdquo; UserInfo={NSUnderlyingError=0x7fada0f31880 {Error Domain=kCFErrorDomainCFNetwork Code=-1022 &ldquo;(null)&rdquo;}, NSErrorFailingURLStringKey=MyServiceURL, NSErrorFailingURLKey=MyServiceURL, NSLocalizedDescription=The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.}</i></b></p>

<p>The reason for this is because developers are mostly testing their apps against a staging server with a misconfigured certificate. In some cases, they might be communication with production servers over HTTPs but might not be using old TLS versions. A simple google search will take you to a <a href="http://stackoverflow.com/questions/32631184/the-resource-could-not-be-loaded-because-the-app-transport-security-policy-requi">Stack overflow</a> that tells you how to bypass ATS by setting a single key NSAllowsArbitraryLoads to YES in the Info.plist file.</p>

<p>The following configuration in the Info.plist file shows the ATS feature bypass implemented.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/x.png" width="499" height="190" alt="X"></p>

<p>However, in some cases the developer might have a secure communication with their backend server. But communication with third party servers for Analytics, Crash logs etc might not be over a secure connection. In this case, they can add certain domains as an exception.</p>

<p><img src="http://prateek147.github.io/images/posts/ios46/y.png" width="558" height="108" alt="Y"></p>

<p>To find whether the app has ATS enabled or not, you can perform the following steps.</p>

<ol>
<li>Decrypt the app using Clutch</li>
<li>Unzip the decrypted IPA file and look inside the Info.plist file.</li>
<li>Look for the key <i>App Transport Security</i>.</li>
</ol>


<p>By the end of 2016, App transport security is going to be a <a href="https://techcrunch.com/2016/06/14/apple-will-require-https-connections-for-ios-apps-by-the-end-of-2016/">requirement</a> for App Store apps. It is important that you report any ATS bypass to the developers during security assessment of iOS Apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 45 - Enhancements in Damn Vulnerable iOS app version 1.5]]></title>
    <link href="http://prateek147.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0"/>
    <updated>2015-05-31T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/31/ios-application-security-part-45-enhancements-in-damn-vulnerable-ios-app-version-2-dot-0</id>
    <content type="html"><![CDATA[<p>In this article, i would like to give a quick walkthrough of the new vulnerabilities and challenges that we have added in version 1.5 of <a href="http://damnvulnerableiosapp.com">Damn Vulnerable iOS app</a>.</p>




<p>In the Insecure Data storage section, we have added challenges for the following databases.</p>




<ul>
    <li>Realm Database</li>
    <li>Couchbase Lite</li>
    <li>YapDatabase</li>
</ul>




<!-- more -->


<p><img src="http://prateek147.github.io/images/posts/ios45/1.png" width="235" height="321" alt="1"></p>

<p><img src="http://prateek147.github.io/images/posts/ios45/2.png" width="235" height="310" alt="2">
<img src="http://prateek147.github.io/images/posts/ios45/3.png" width="235" height="314" alt="3"></p>

<p>We have also added a new section on <i>Extension vulnerabilities</i>, which covers vulnerabilities in different application extensions, a feature that was introduced with iOS 8.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/4.png" width="235" height="328" alt="4">
<img src="http://prateek147.github.io/images/posts/ios45/5.png" width="235" height="328" alt="5"></p>

<p>In the <i>Runtime Manipulation section</i>, we have added a challenge where you can write a cycript script to brute force a login screen.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/6.png" width="235" height="281" alt="6"></p>

<p>Another new section is <i>Attacks on third party libraries</i>, which demonstrates the security gaps that can occur in your application when you use third party libraries in your project.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/7.png" width="235" height="315" alt="7">
<img src="http://prateek147.github.io/images/posts/ios45/8.png" width="235" height="320" alt="8">
<img src="http://prateek147.github.io/images/posts/ios45/9.png" width="235" height="265" alt="9">
<img src="http://prateek147.github.io/images/posts/ios45/10.png" width="235" height="256" alt="10">
<img src="http://prateek147.github.io/images/posts/ios45/11.png" width="235" height="281" alt="11">
<img src="http://prateek147.github.io/images/posts/ios45/12.png" width="235" height="266" alt="12"></p>

<p>In the section on <i>Side Channel Data leakage</i>, we have added another vulnerability demonstrating insecure storage of cookies.</p>


<p><img src="http://prateek147.github.io/images/posts/ios45/13.png" width="233" height="365" alt="13"></p>

<p>The current downloadable IPA file from the website is a fat binary that will work on both 32 bit and 64 bit devices. This app will work on all iOS versions starting from iOS 7.0.</p>




<p>Some important links</p>




<ol>
    <li><a href="http://damnvulnerableiosapp.com">Official Website</a></li>
    <li><a href="http://github.com/prateek147/DVIA">Github Page</a></li>
    <li><a href="http://damnvulnerableiosapp.com#downloads">Downloads Page</a></li>
</ol>




<p>We are working on getting the new solutions out as soon as possible so please be patient. For previous vulnerabilities, you can download the solutions for free from <a href="http://damnvulnerableiosapp.com#solutions">here</a>.</p>




<p>For any bugs, suggestions etc, please don't hesitate to contact me. Also, a very special thanks to <a href="http://twitter.com/igrekde">Egor</a> for his contributions to the project.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 44 - Bypassing Jailbreak detection using Xcon]]></title>
    <link href="http://prateek147.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon"/>
    <updated>2015-05-23T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/23/ios-application-security-part-44-bypassing-jailbreak-detection-using-xcon</id>
    <content type="html"><![CDATA[<p>In this small article, we will look at a very handful utility named <a href="https://www.theiphonewiki.com/wiki/XCon">Xcon</a>for bypassing Jailbreak detection. As per the wiki page ...</p>




<p><i>xCon is a collaborative project by n00neimp0rtant and Lunatik that aims to be an all-in-one solution for hooking every known method and function responsible for informing an application of a jailbroken device. At first, the project aimed to patch applications on a per-app basis, but now it uses lower-level hooks to cover any apps that attempt to use the same procedure, even patching apps not explicitly reversed by the developers. Originally an open-source project, it remains closed-source now to discourage App Store developers from working around xCon's hooks.</i></p>




<p>A very handful resource for detecting jailbroken devices can be found <a href="https://www.theiphonewiki.com/wiki/Bypassing_Jailbreak_Detection">here</a>. Here is a screenshot from the page. The purpose of Xcon is to make sure all these checks fail.</p>




<!-- more -->


<p><img src="http://prateek147.github.io/images/posts/ios44/1.png" width="1249" height="432" alt="1"></p>

<p>Downloading Xcon in your project is very straightforward. Make sure http://apt.modmyi.com is added as a source in Cydia and search for Xcon. Install in on your device and restart your device.</p>


<p><img src="http://prateek147.github.io/images/posts/ios44/x.PNG" width="375" height="677" alt="X"></p>

<p>Once you run any app, you will notice that the library will inject into the process as can be seen from the following device logs.
    
<img src="http://prateek147.github.io/images/posts/ios44/2.png" width="760" height="146" alt="2">

<p>If you are performing jailbreak detection in your application, it is recommended to have your app checked against Xcon. The library is closed source as making it open source will help developers understand how it works and hence make workarounds to their code.</p>
Please note that the current version of Xcon has a lot of issues with iOS 8 and 64 bit devices. Hence it is recommended to run your app on a 32 bit device if you want to test it against Xcon. A complete list of all the issues occuring with Xcon can be found <a href="https://github.com/n00neimp0rtant/xCon-Issues">here.</a></p>


<p><img src="http://prateek147.github.io/images/posts/ios44/5.png" width="776" height="90" alt="5"></p>

<p>Xcon has already patched jailbreak checks done by a lot of the popular apps and it also maintains a list of it. A screenshot of it can be found below. To see the complete list, you can visit Xcon's page.</p>


<p><img src="http://prateek147.github.io/images/posts/ios44/4.png" width="1508" height="449" alt="4"></p>

<p>Xcon is a recommended package to install on your device if you are pentesting an app that does jailbreak detection or if you are a developer and want to know that your jailbreak detection algorithm is accurate.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Application Security Part 43 - FAT binaries &amp; LLDB usage continued]]></title>
    <link href="http://prateek147.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued"/>
    <updated>2015-05-17T00:18:00+04:00</updated>
    <id>http://prateek147.github.io/2015/05/17/ios-application-security-part-43-fat-binaries-and-lldb-usage-continued</id>
    <content type="html"><![CDATA[<p>In this article, we will talk about FAT binaries and see more usage of LLDB.</p>




<p>Fat binaries are single binaries that are compiled for different architectures. They are done so because it is easier to ship a single binary for different architectures. Apple has been changing the architecture in the last three versions of it's iPhones, armv7, armv7s, and arm64. The good thing is that new iOS devices can run applications compiled for older architectures as well. However it is recommended to upgrade the architecture of the application for enhanced performance.</p>




<p>You can see the architecture for your project by going to the Project in Xcode and looking under Build Settings.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/1.png" width="645" height="229" alt="1"></p>

<!-- more -->




<p>A good way to find the architectures for which a binary is deployed is using otool. You can use the -f command to look at the fat headers.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/2.png" width="243" height="202" alt="2"></p>

<p>As you can see, it doesn't mention the architecture name but the cputype and cpusubtype. However, after a bit of lookup from the information on cputype and cpusubtype, you can find out that the first one is armv7s whereas the second one is armv64. You can also use Clutch to find this out. Whitle decrypting, it can give information about the kinds of architectures the binary had. As you can see, in this case it was armv7 and arm64.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/3.png" width="514" height="332" alt="3"></p>

<p>The easiest way is to find via the tool lipo</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/3s.png" width="576" height="42" alt="3s"></p>

<p>In some cases, if some tool doesn't work against a particular application, it is better to strip that architecture from the binary. This can be done using a tool named lipo. This is essentially useful as a lot of tools don't work against arm64 binaries.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/4.png" width="743" height="137" alt="4"></p>

<p>So with this little intro about fat binaries out of the way, lets carry on using LLDB. Like last article, we will be performing the analysis on Twitter app. Using Hopper, we can see some methods in the Twitter app.</p>


<p></p>

<p><img src="http://prateek147.github.io/images/posts/ios43/5.png" width="1019" height="551" alt="5"></p>

<p>So let's set a breakpoint for the method <i>b -[T1CommerceOfferHowWorksView setHiddenObserver:]</i>.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/6.png" width="557" height="76" alt="6"></p>

<p>Oops, looks like we are unable to set a breakpoint. But why is that ? The reason is, LLDB hasn't loaded the symbols from the binary yet. The symbols are what contains information about the class names and methods. This is unlike GDB where it loads the symbols while performing analysis on the binary. Remember however that you are running the LLDB client on your system and not the device. To confirm that you have not yet loaded the symbols, you can use the command <i>image dump symtab</i> to load the symbols and look for this particular method, you will not find it.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/7.png" width="902" height="427" alt="7"></p>

<p>In order to load the symbols from the binary into LLDB, first download the LLDB binary onto your computer, then use the following command to load the symbols. Note that the architeture is set to armv7 by default.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/8.png" width="605" height="65" alt="8"></p>

<p>And now, you can see that you can set the breakpoint.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/9.png" width="854" height="59" alt="9"></p>

<p>If you know that the app is compiled for a 64 bit architecture, and the device is a 64 bit device, you should set the architecture to arm64. Does that make a difference ? Yes. Because the address will be different for the same method for different architectures (Fat binaries) and the method will not be called if you have set the breakpoint for a different architecture than the device it is compiled on.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/10.png" width="921" height="101" alt="10"></p>

<p>Another thing. If you ever run a command and get the error <i>invalid frame</i>, it means that the process is still running. In order to execute commands, the process must be paused. This can be done using the <i>process interrupt</i> command.</p>


<p><img src="http://prateek147.github.io/images/posts/ios43/x1.png" width="477" height="99" alt="X1">
<img src="http://prateek147.github.io/images/posts/ios43/x2.png" width="570" height="259" alt="X2"></p>

<p>If you think that arm64 is hard to understand and it is a bit difficult to modify the runtime flow, you can load the same executable on a 32 bit device and use GDB or LLDB to modify the variables and change the runtime flow. This is because most applications currently come with 32 bit support. However, in the coming year or so, this will not be the case. We will also cover arm64 assembly in a later article.</p>

]]></content>
  </entry>
  
</feed>
